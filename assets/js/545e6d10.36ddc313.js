(self.webpackChunkturf_www=self.webpackChunkturf_www||[]).push([[97723],{77166:(e,t,r)=>{"use strict";r.r(t),r.d(t,{Map0:()=>f,assets:()=>p,contentTitle:()=>u,default:()=>y,frontMatter:()=>l,metadata:()=>d,toc:()=>h});var n=r(74848),o=r(28453),i=r(67149),s=r(43665),a=r(36145),c=r(78478);const l={title:"nearestPoint"},u=void 0,d={id:"api/nearestPoint",title:"nearestPoint",description:"Description",source:"@site/versioned_docs/version-7.0.0/api/nearestPoint.mdx",sourceDirName:"api",slug:"/api/nearestPoint",permalink:"/docs/api/nearestPoint",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/versioned_docs/version-7.0.0/api/nearestPoint.mdx",tags:[],version:"7.0.0",frontMatter:{title:"nearestPoint"},sidebar:"apiSidebar",previous:{title:"triangleGrid",permalink:"/docs/api/triangleGrid"},next:{title:"clustersDbscan",permalink:"/docs/api/clustersDbscan"}},p={},h=[{value:"Description",id:"description",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3},{value:"Examples",id:"examples",level:3},{value:"Installation",id:"installation",level:3}];function f(){var e=i.zx([28.965797,41.010086],{"marker-color":"#0F0"}),t=i.Lr([i.zx([28.973865,41.011122]),i.zx([28.948459,41.024204]),i.zx([28.938674,41.013324])]),r=s.x(e,t),o={targetPoint:e,points:t,nearest:r};return r.properties["marker-color"]="#F00",(0,n.jsx)(a.A,{addToMap:o})}function m(e){const t={a:"a",code:"code",em:"em",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h3,{id:"description",children:"Description"}),"\n",(0,n.jsxs)(t.p,{children:["Takes a reference ",(0,n.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1.2",children:"point"})," and a FeatureCollection of Features\nwith Point geometries and returns the\npoint from the FeatureCollection closest to the reference. This calculation\nis geodesic."]}),"\n",(0,n.jsx)(t.h3,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"targetPoint"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.strong,{children:(0,n.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1.1",children:"Coord"})})}),(0,n.jsx)(t.td,{children:"the reference point"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"points"}),(0,n.jsx)(t.td,{children:(0,n.jsxs)(t.strong,{children:[(0,n.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.3",children:"FeatureCollection"}),"<",(0,n.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1.2",children:"Point"}),">"]})}),(0,n.jsx)(t.td,{children:"against input point set"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsxs)(t.td,{children:["options",(0,n.jsx)("i",{children:"?"})]}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.strong,{children:"Object"})}),(0,n.jsxs)(t.td,{children:["Optional parameters ",(0,n.jsx)(t.em,{children:"(default {})"})]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsxs)(t.td,{children:["options.units",(0,n.jsx)("i",{children:"?"})]}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.strong,{children:"string"})}),(0,n.jsxs)(t.td,{children:["the units of the numeric result ",(0,n.jsx)(t.em,{children:"(default 'kilometers')"})]})]})]})]}),"\n",(0,n.jsx)(t.h3,{id:"returns",children:"Returns"}),"\n",(0,n.jsx)("ul",{children:(0,n.jsxs)(t.p,{children:[(0,n.jsxs)(t.strong,{children:[(0,n.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.2",children:"Feature"}),"<",(0,n.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1.2",children:"Point"}),">"]})," the closest point in the set to the reference point"]})}),"\n",(0,n.jsx)(t.h3,{id:"examples",children:"Examples"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:'var targetPoint = turf.point([28.965797, 41.010086], {\n  "marker-color": "#0F0",\n});\nvar points = turf.featureCollection([\n  turf.point([28.973865, 41.011122]),\n  turf.point([28.948459, 41.024204]),\n  turf.point([28.938674, 41.013324]),\n]);\n\nvar nearest = turf.nearestPoint(targetPoint, points);\n'})}),"\n","\n",(0,n.jsx)(c.A,{children:()=>(0,n.jsx)(f,{})}),"\n",(0,n.jsx)(t.h3,{id:"installation",children:"Installation"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:'$ npm install @turf/nearest-point\n\nimport { nearestPoint } from "@turf/nearest-point";\nconst result = nearestPoint(...);\n'})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:'$ npm install @turf/turf\n\nimport * as turf from "@turf/turf";\nconst result = turf.nearestPoint(...);\n'})})]})}function y(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(m,{...e})}):m(e)}},42634:()=>{},53257:(e,t,r)=>{"use strict";r.d(t,{Rd:()=>a,o8:()=>i});var n=Object.defineProperty,o=(e,t)=>n(e,"name",{value:t,configurable:!0});function i(e){if(!e)throw new Error("geojson is required");switch(e.type){case"Feature":return s(e);case"FeatureCollection":return c(e);case"Point":case"LineString":case"Polygon":case"MultiPoint":case"MultiLineString":case"MultiPolygon":case"GeometryCollection":return l(e);default:throw new Error("unknown GeoJSON type")}}function s(e){const t={type:"Feature"};return Object.keys(e).forEach((r=>{switch(r){case"type":case"properties":case"geometry":return;default:t[r]=e[r]}})),t.properties=a(e.properties),null==e.geometry?t.geometry=null:t.geometry=l(e.geometry),t}function a(e){const t={};return e?(Object.keys(e).forEach((r=>{const n=e[r];"object"==typeof n?null===n?t[r]=null:Array.isArray(n)?t[r]=n.map((e=>e)):t[r]=a(n):t[r]=n})),t):t}function c(e){const t={type:"FeatureCollection"};return Object.keys(e).forEach((r=>{switch(r){case"type":case"features":return;default:t[r]=e[r]}})),t.features=e.features.map((e=>s(e))),t}function l(e){const t={type:e.type};return e.bbox&&(t.bbox=e.bbox),"GeometryCollection"===e.type?(t.geometries=e.geometries.map((e=>l(e))),t):(t.coordinates=u(e.coordinates),t)}function u(e){const t=e;return"object"!=typeof t[0]?t.slice():t.map((e=>u(e)))}o(i,"clone"),o(s,"cloneFeature"),o(a,"cloneProperties"),o(c,"cloneFeatureCollection"),o(l,"cloneGeometry"),o(u,"deepSlice")},18685:(e,t,r)=>{"use strict";r.d(t,{I:()=>i});var n=r(83490),o=r(67149);function i(e,t,r={}){var i=(0,n.uG)(e),s=(0,n.uG)(t),a=(0,o.tR)(s[1]-i[1]),c=(0,o.tR)(s[0]-i[0]),l=(0,o.tR)(i[1]),u=(0,o.tR)(s[1]),d=Math.pow(Math.sin(a/2),2)+Math.pow(Math.sin(c/2),2)*Math.cos(l)*Math.cos(u);return(0,o.cJ)(2*Math.atan2(Math.sqrt(d),Math.sqrt(1-d)),r.units)}(0,Object.defineProperty)(i,"name",{value:"distance",configurable:!0})},83490:(e,t,r)=>{"use strict";r.d(t,{$R:()=>a,Pw:()=>d,bg:()=>u,iw:()=>l,mo:()=>c,uG:()=>s});var n=r(67149),o=Object.defineProperty,i=(e,t)=>o(e,"name",{value:t,configurable:!0});function s(e){if(!e)throw new Error("coord is required");if(!Array.isArray(e)){if("Feature"===e.type&&null!==e.geometry&&"Point"===e.geometry.type)return[...e.geometry.coordinates];if("Point"===e.type)return[...e.coordinates]}if(Array.isArray(e)&&e.length>=2&&!Array.isArray(e[0])&&!Array.isArray(e[1]))return[...e];throw new Error("coord must be GeoJSON Point or an Array of numbers")}function a(e){if(Array.isArray(e))return e;if("Feature"===e.type){if(null!==e.geometry)return e.geometry.coordinates}else if(e.coordinates)return e.coordinates;throw new Error("coords must be GeoJSON Feature, Geometry Object or an Array")}function c(e,t,r){if(!e)throw new Error("No feature passed");if(!r)throw new Error(".featureOf() requires a name");if(!e||"Feature"!==e.type||!e.geometry)throw new Error("Invalid input to "+r+", Feature with geometry required");if(!e.geometry||e.geometry.type!==t)throw new Error("Invalid input to "+r+": must be a "+t+", given "+e.geometry.type)}function l(e,t,r){if(!e)throw new Error("No featureCollection passed");if(!r)throw new Error(".collectionOf() requires a name");if(!e||"FeatureCollection"!==e.type)throw new Error("Invalid input to "+r+", FeatureCollection required");for(const n of e.features){if(!n||"Feature"!==n.type||!n.geometry)throw new Error("Invalid input to "+r+", Feature with geometry required");if(!n.geometry||n.geometry.type!==t)throw new Error("Invalid input to "+r+": must be a "+t+", given "+n.geometry.type)}}function u(e){return"Feature"===e.type?e.geometry:e}function d(e,t){return"FeatureCollection"===e.type?"FeatureCollection":"GeometryCollection"===e.type?"GeometryCollection":"Feature"===e.type&&null!==e.geometry?e.geometry.type:e.type}i(s,"getCoord"),i(a,"getCoords"),i((function e(t){if(t.length>1&&(0,n.Et)(t[0])&&(0,n.Et)(t[1]))return!0;if(Array.isArray(t[0])&&t[0].length)return e(t[0]);throw new Error("coordinates must only contain numbers")}),"containsNumber"),i((function(e,t,r){if(!t||!r)throw new Error("type and name required");if(!e||e.type!==t)throw new Error("Invalid input to "+r+": must be a "+t+", given "+e.type)}),"geojsonType"),i(c,"featureOf"),i(l,"collectionOf"),i(u,"getGeom"),i(d,"getType")},43665:(e,t,r)=>{"use strict";r.d(t,{x:()=>m});var n=r(53257),o=r(18685),i=r(63399),s=Object.defineProperty,a=Object.defineProperties,c=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,u=Object.prototype.hasOwnProperty,d=Object.prototype.propertyIsEnumerable,p=(e,t,r)=>t in e?s(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,h=(e,t)=>{for(var r in t||(t={}))u.call(t,r)&&p(e,r,t[r]);if(l)for(var r of l(t))d.call(t,r)&&p(e,r,t[r]);return e},f=(e,t)=>a(e,c(t));function m(e,t,r={}){if(!e)throw new Error("targetPoint is required");if(!t)throw new Error("points is required");let s=1/0,a=0;(0,i.us)(t,((t,n)=>{const i=(0,o.I)(e,t,r);i<s&&(a=n,s=i)}));const c=(0,n.o8)(t.features[a]);return f(h({},c),{properties:f(h({},c.properties),{featureIndex:a,distanceToPoint:s})})}s(m,"name",{value:"nearestPoint",configurable:!0})}}]);