(self.webpackChunkturf_www=self.webpackChunkturf_www||[]).push([[38754],{82622:(e,s,t)=>{"use strict";t.r(s),t.d(s,{Map0:()=>p,assets:()=>u,contentTitle:()=>o,default:()=>m,frontMatter:()=>d,metadata:()=>h,toc:()=>x});var n=t(74848),r=t(28453),i=t(84245),l=t(72277),c=t(36145),a=t(78478);const d={title:"clustersDbscan"},o=void 0,h={id:"api/clustersDbscan",title:"clustersDbscan",description:"Description",source:"@site/versioned_docs/version-7.0.0/api/clustersDbscan.mdx",sourceDirName:"api",slug:"/api/clustersDbscan",permalink:"/docs/api/clustersDbscan",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/versioned_docs/version-7.0.0/api/clustersDbscan.mdx",tags:[],version:"7.0.0",frontMatter:{title:"clustersDbscan"},sidebar:"apiSidebar",previous:{title:"nearestPoint",permalink:"/docs/api/nearestPoint"},next:{title:"clustersKmeans",permalink:"/docs/api/clustersKmeans"}},u={},x=[{value:"Description",id:"description",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3},{value:"Examples",id:"examples",level:3},{value:"Installation",id:"installation",level:3}];function p(){var e=i._e(100,{bbox:[0,30,20,50]}),s={clustered:l.Z(e,100)};return(0,n.jsx)(c.A,{addToMap:s})}function j(e){const s={a:"a",code:"code",em:"em",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.h3,{id:"description",children:"Description"}),"\n",(0,n.jsxs)(s.p,{children:["Takes a set of ",(0,n.jsx)(s.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1.2",children:"points"})," and partition them into clusters according to ",(0,n.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/DBSCAN",children:"DBSCAN's"})," data clustering algorithm."]}),"\n",(0,n.jsx)(s.h3,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{children:"Name"}),(0,n.jsx)(s.th,{children:"Type"}),(0,n.jsx)(s.th,{children:"Description"})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"points"}),(0,n.jsx)(s.td,{children:(0,n.jsxs)(s.strong,{children:[(0,n.jsx)(s.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.3",children:"FeatureCollection"}),"<",(0,n.jsx)(s.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1.2",children:"Point"}),">"]})}),(0,n.jsx)(s.td,{children:"to be clustered"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"maxDistance"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.strong,{children:"number"})}),(0,n.jsx)(s.td,{children:"Maximum Distance between any point of the cluster to generate the clusters (kilometers only)"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsxs)(s.td,{children:["options",(0,n.jsx)("i",{children:"?"})]}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.strong,{children:"Object"})}),(0,n.jsxs)(s.td,{children:["Optional parameters ",(0,n.jsx)(s.em,{children:"(default {})"})]})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsxs)(s.td,{children:["options.units",(0,n.jsx)("i",{children:"?"})]}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.strong,{children:"string"})}),(0,n.jsxs)(s.td,{children:["in which ",(0,n.jsx)(s.code,{children:"maxDistance"})," is expressed, can be degrees, radians, miles, or kilometers ",(0,n.jsx)(s.em,{children:'(default "kilometers")'})]})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsxs)(s.td,{children:["options.mutate",(0,n.jsx)("i",{children:"?"})]}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.strong,{children:"boolean"})}),(0,n.jsxs)(s.td,{children:["Allows GeoJSON input to be mutated ",(0,n.jsx)(s.em,{children:"(default false)"})]})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsxs)(s.td,{children:["options.minPoints",(0,n.jsx)("i",{children:"?"})]}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.strong,{children:"number"})}),(0,n.jsxs)(s.td,{children:["Minimum number of points to generate a single cluster, points which do not meet this requirement will be classified as an 'edge' or 'noise'. ",(0,n.jsx)(s.em,{children:"(default 3)"})]})]})]})]}),"\n",(0,n.jsx)(s.h3,{id:"returns",children:"Returns"}),"\n",(0,n.jsxs)("ul",{children:[(0,n.jsxs)(s.p,{children:[(0,n.jsxs)(s.strong,{children:[(0,n.jsx)(s.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.3",children:"FeatureCollection"}),"<",(0,n.jsx)(s.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1.2",children:"Point"}),">"]})," Clustered Points with an additional two properties associated to each Feature:"]}),(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"{number} cluster - the associated clusterId"}),"\n",(0,n.jsx)(s.li,{children:"{string} dbscan - type of point it has been classified as ('core' | 'edge' | 'noise')"}),"\n"]})]}),"\n",(0,n.jsx)(s.h3,{id:"examples",children:"Examples"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-javascript",children:"// create random points with random z-values in their properties\nvar points = turf.randomPoint(100, { bbox: [0, 30, 20, 50] });\nvar maxDistance = 100;\nvar clustered = turf.clustersDbscan(points, maxDistance);\n"})}),"\n","\n",(0,n.jsx)(a.A,{children:()=>(0,n.jsx)(p,{})}),"\n",(0,n.jsx)(s.h3,{id:"installation",children:"Installation"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-javascript",children:'$ npm install @turf/clusters-dbscan\n\nimport { clustersDbscan } from "@turf/clusters-dbscan";\nconst result = clustersDbscan(...);\n'})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-javascript",children:'$ npm install @turf/turf\n\nimport * as turf from "@turf/turf";\nconst result = turf.clustersDbscan(...);\n'})})]})}function m(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(j,{...e})}):j(e)}},42634:()=>{}}]);