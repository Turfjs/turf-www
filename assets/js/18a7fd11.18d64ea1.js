(self.webpackChunkturf_www=self.webpackChunkturf_www||[]).push([[54504],{90554:(e,t,n)=>{"use strict";n.r(t),n.d(t,{Map0:()=>f,assets:()=>d,contentTitle:()=>p,default:()=>g,frontMatter:()=>a,metadata:()=>h,toc:()=>u});var i=n(74848),r=n(28453),s=n(67149),l=n(90522),o=n(36145),c=n(78478);const a={title:"lineIntersect"},p=void 0,h={id:"api/lineIntersect",title:"lineIntersect",description:"Description",source:"@site/docs/api/lineIntersect.mdx",sourceDirName:"api",slug:"/api/lineIntersect",permalink:"/docs/next/api/lineIntersect",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api/lineIntersect.mdx",tags:[],version:"current",frontMatter:{title:"lineIntersect"},sidebar:"apiSidebar",previous:{title:"lineChunk",permalink:"/docs/next/api/lineChunk"},next:{title:"lineOverlap",permalink:"/docs/next/api/lineOverlap"}},d={},u=[{value:"Description",id:"description",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3},{value:"Examples",id:"examples",level:3},{value:"Installation",id:"installation",level:3}];function f(){var e=s.wi([[126,-11],[129,-21]]),t=s.wi([[123,-18],[131,-14]]),n={line1:e,line2:t,intersects:l.k(e,t)};return(0,i.jsx)(o.A,{addToMap:n})}function x(e){const t={a:"a",code:"code",em:"em",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h3,{id:"description",children:"Description"}),"\n",(0,i.jsx)(t.p,{children:"Takes any LineString or Polygon GeoJSON and returns the intersecting point(s)."}),"\n",(0,i.jsx)(t.h3,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Name"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"line1"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3",children:"GeoJSON"})})}),(0,i.jsx)(t.td,{children:"any LineString or Polygon"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"line2"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3",children:"GeoJSON"})})}),(0,i.jsx)(t.td,{children:"any LineString or Polygon"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsxs)(t.td,{children:["options",(0,i.jsx)("i",{children:"?"})]}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.strong,{children:"Object"})}),(0,i.jsxs)(t.td,{children:["Optional parameters ",(0,i.jsx)(t.em,{children:"(default {})"})]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsxs)(t.td,{children:["options.removeDuplicates",(0,i.jsx)("i",{children:"?"})]}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.strong,{children:"boolean"})}),(0,i.jsxs)(t.td,{children:["remove duplicate intersections ",(0,i.jsx)(t.em,{children:"(default true)"})]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsxs)(t.td,{children:["options.ignoreSelfIntersections",(0,i.jsx)("i",{children:"?"})]}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.strong,{children:"boolean"})}),(0,i.jsxs)(t.td,{children:["ignores self-intersections on input features ",(0,i.jsx)(t.em,{children:"(default false)"})]})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"returns",children:"Returns"}),"\n",(0,i.jsx)("ul",{children:(0,i.jsxs)(t.p,{children:[(0,i.jsxs)(t.strong,{children:[(0,i.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.3",children:"FeatureCollection"}),"<",(0,i.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1.2",children:"Point"}),">"]})," point(s) that intersect both"]})}),"\n",(0,i.jsx)(t.h3,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:"var line1 = turf.lineString([\n  [126, -11],\n  [129, -21],\n]);\nvar line2 = turf.lineString([\n  [123, -18],\n  [131, -14],\n]);\nvar intersects = turf.lineIntersect(line1, line2);\n"})}),"\n","\n",(0,i.jsx)(c.A,{children:()=>(0,i.jsx)(f,{})}),"\n",(0,i.jsx)(t.h3,{id:"installation",children:"Installation"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:'$ npm install @turf/line-intersect\n\nimport { lineIntersect } from "@turf/line-intersect";\nconst result = lineIntersect(...);\n'})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:'$ npm install @turf/turf\n\nimport * as turf from "@turf/turf";\nconst result = turf.lineIntersect(...);\n'})})]})}function g(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(x,{...e})}):x(e)}},23494:(e,t,n)=>{"use strict";n.d(t,{A:()=>f});class i{constructor(e=[],t=r){if(this.data=e,this.length=this.data.length,this.compare=t,this.length>0)for(let n=(this.length>>1)-1;n>=0;n--)this._down(n)}push(e){this.data.push(e),this.length++,this._up(this.length-1)}pop(){if(0===this.length)return;const e=this.data[0],t=this.data.pop();return this.length--,this.length>0&&(this.data[0]=t,this._down(0)),e}peek(){return this.data[0]}_up(e){const{data:t,compare:n}=this,i=t[e];for(;e>0;){const r=e-1>>1,s=t[r];if(n(i,s)>=0)break;t[e]=s,e=r}t[e]=i}_down(e){const{data:t,compare:n}=this,i=this.length>>1,r=t[e];for(;e<i;){let i=1+(e<<1),s=t[i];const l=i+1;if(l<this.length&&n(t[l],s)<0&&(i=l,s=t[l]),n(s,r)>=0)break;t[e]=s,e=i}t[e]=r}}function r(e,t){return e<t?-1:e>t?1:0}function s(e,t){return e.p.x>t.p.x?1:e.p.x<t.p.x?-1:e.p.y!==t.p.y?e.p.y>t.p.y?1:-1:1}function l(e,t){return e.rightSweepEvent.p.x>t.rightSweepEvent.p.x?1:e.rightSweepEvent.p.x<t.rightSweepEvent.p.x?-1:e.rightSweepEvent.p.y!==t.rightSweepEvent.p.y?e.rightSweepEvent.p.y<t.rightSweepEvent.p.y?1:-1:1}class o{constructor(e,t,n,i){this.p={x:e[0],y:e[1]},this.featureId=t,this.ringId=n,this.eventId=i,this.otherEvent=null,this.isLeftEndpoint=null}isSamePoint(e){return this.p.x===e.p.x&&this.p.y===e.p.y}}let c=0,a=0,p=0;function h(e,t){const n="Feature"===e.type?e.geometry:e;let i=n.coordinates;"Polygon"!==n.type&&"MultiLineString"!==n.type||(i=[i]),"LineString"===n.type&&(i=[[i]]);for(let r=0;r<i.length;r++)for(let e=0;e<i[r].length;e++){let n=i[r][e][0],l=null;a+=1;for(let h=0;h<i[r][e].length-1;h++){l=i[r][e][h+1];const d=new o(n,c,a,p),u=new o(l,c,a,p+1);d.otherEvent=u,u.otherEvent=d,s(d,u)>0?(u.isLeftEndpoint=!0,d.isLeftEndpoint=!1):(d.isLeftEndpoint=!0,u.isLeftEndpoint=!1),t.push(d),t.push(u),n=l,p+=1}}c+=1}class d{constructor(e){this.leftSweepEvent=e,this.rightSweepEvent=e.otherEvent}}function u(e,t){if(null===e||null===t)return!1;if(e.leftSweepEvent.ringId===t.leftSweepEvent.ringId&&(e.rightSweepEvent.isSamePoint(t.leftSweepEvent)||e.rightSweepEvent.isSamePoint(t.leftSweepEvent)||e.rightSweepEvent.isSamePoint(t.rightSweepEvent)||e.leftSweepEvent.isSamePoint(t.leftSweepEvent)||e.leftSweepEvent.isSamePoint(t.rightSweepEvent)))return!1;const n=e.leftSweepEvent.p.x,i=e.leftSweepEvent.p.y,r=e.rightSweepEvent.p.x,s=e.rightSweepEvent.p.y,l=t.leftSweepEvent.p.x,o=t.leftSweepEvent.p.y,c=t.rightSweepEvent.p.x,a=t.rightSweepEvent.p.y,p=(a-o)*(r-n)-(c-l)*(s-i),h=(c-l)*(i-o)-(a-o)*(n-l),d=(r-n)*(i-o)-(s-i)*(n-l);if(0===p)return!1;const u=h/p,f=d/p;if(u>=0&&u<=1&&f>=0&&f<=1){return[n+u*(r-n),i+u*(s-i)]}return!1}const f=function(e,t){const n=new i([],s);return function(e,t){if("FeatureCollection"===e.type){const n=e.features;for(let e=0;e<n.length;e++)h(n[e],t)}else h(e,t)}(e,n),function(e,t){t=t||!1;const n=[],r=new i([],l);for(;e.length;){const i=e.pop();if(i.isLeftEndpoint){const e=new d(i);for(let s=0;s<r.data.length;s++){const l=r.data[s];if(t&&l.leftSweepEvent.featureId===i.featureId)continue;const o=u(e,l);!1!==o&&n.push(o)}r.push(e)}else!1===i.isLeftEndpoint&&r.pop()}return n}(n,t)}},42634:()=>{},90522:(e,t,n)=>{"use strict";n.d(t,{k:()=>o});var i=n(67149),r=n(23494),s=Object.defineProperty,l=r.A;function o(e,t,n={}){const{removeDuplicates:r=!0,ignoreSelfIntersections:s=!1}=n;let o=[];"FeatureCollection"===e.type?o=o.concat(e.features):"Feature"===e.type?o.push(e):"LineString"!==e.type&&"Polygon"!==e.type&&"MultiLineString"!==e.type&&"MultiPolygon"!==e.type||o.push((0,i.N4)(e)),"FeatureCollection"===t.type?o=o.concat(t.features):"Feature"===t.type?o.push(t):"LineString"!==t.type&&"Polygon"!==t.type&&"MultiLineString"!==t.type&&"MultiPolygon"!==t.type||o.push((0,i.N4)(t));const c=l((0,i.Lr)(o),s);let a=[];if(r){const e={};c.forEach((t=>{const n=t.join(",");e[n]||(e[n]=!0,a.push(t))}))}else a=c;return(0,i.Lr)(a.map((e=>(0,i.zx)(e))))}s(o,"name",{value:"lineIntersect",configurable:!0})}}]);