(self.webpackChunkturf_www=self.webpackChunkturf_www||[]).push([[68247],{74124:(e,r,t)=>{"use strict";t.r(r),t.d(r,{Map0:()=>p,assets:()=>h,contentTitle:()=>d,default:()=>y,frontMatter:()=>c,metadata:()=>u,toc:()=>f});var n=t(74848),o=t(28453),i=t(67149),s=t(45111),a=t(36145),l=t(78478);const c={title:"transformTranslate"},d=void 0,u={id:"api/transformTranslate",title:"transformTranslate",description:"Description",source:"@site/versioned_docs/version-7.0.0/api/transformTranslate.mdx",sourceDirName:"api",slug:"/api/transformTranslate",permalink:"/docs/api/transformTranslate",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/versioned_docs/version-7.0.0/api/transformTranslate.mdx",tags:[],version:"7.0.0",frontMatter:{title:"transformTranslate"},sidebar:"apiSidebar",previous:{title:"transformScale",permalink:"/docs/api/transformScale"},next:{title:"union",permalink:"/docs/api/union"}},h={},f=[{value:"Description",id:"description",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3},{value:"Examples",id:"examples",level:3},{value:"Installation",id:"installation",level:3}];function p(){var e=i.n1([[[0,29],[3.5,29],[2.5,32],[0,29]]]),r=s.t(e,100,35),t={poly:e,translatedPoly:r};return r.properties={stroke:"#F00","stroke-width":4},(0,n.jsx)(a.A,{addToMap:t})}function m(e){const r={a:"a",code:"code",em:"em",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h3,{id:"description",children:"Description"}),"\n",(0,n.jsx)(r.p,{children:"Moves any geojson Feature or Geometry of a specified distance along a Rhumb Line\non the provided direction angle."}),"\n",(0,n.jsx)(r.h3,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Name"}),(0,n.jsx)(r.th,{children:"Type"}),(0,n.jsx)(r.th,{children:"Description"})]})}),(0,n.jsxs)(r.tbody,{children:[(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"geojson"}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.strong,{children:(0,n.jsx)(r.a,{href:"https://tools.ietf.org/html/rfc7946#section-3",children:"GeoJSON"})})}),(0,n.jsx)(r.td,{children:"object to be translated"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"distance"}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.strong,{children:"number"})}),(0,n.jsx)(r.td,{children:"length of the motion; negative values determine motion in opposite direction"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"direction"}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.strong,{children:"number"})}),(0,n.jsx)(r.td,{children:"of the motion; angle from North in decimal degrees, positive clockwise"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsxs)(r.td,{children:["options",(0,n.jsx)("i",{children:"?"})]}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.strong,{children:"Object"})}),(0,n.jsxs)(r.td,{children:["Optional parameters ",(0,n.jsx)(r.em,{children:"(default {})"})]})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsxs)(r.td,{children:["options.units",(0,n.jsx)("i",{children:"?"})]}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.strong,{children:"string"})}),(0,n.jsxs)(r.td,{children:["in which ",(0,n.jsx)(r.code,{children:"distance"})," will be express; miles, kilometers, degrees, or radians ",(0,n.jsx)(r.em,{children:"(default 'kilometers')"})]})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsxs)(r.td,{children:["options.zTranslation",(0,n.jsx)("i",{children:"?"})]}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.strong,{children:"number"})}),(0,n.jsxs)(r.td,{children:["length of the vertical motion, same unit of distance ",(0,n.jsx)(r.em,{children:"(default 0)"})]})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsxs)(r.td,{children:["options.mutate",(0,n.jsx)("i",{children:"?"})]}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.strong,{children:"boolean"})}),(0,n.jsxs)(r.td,{children:["allows GeoJSON input to be mutated (significant performance increase if true) ",(0,n.jsx)(r.em,{children:"(default false)"})]})]})]})]}),"\n",(0,n.jsx)(r.h3,{id:"returns",children:"Returns"}),"\n",(0,n.jsx)("ul",{children:(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.strong,{children:(0,n.jsx)(r.a,{href:"https://tools.ietf.org/html/rfc7946#section-3",children:"GeoJSON"})})," the translated GeoJSON object"]})}),"\n",(0,n.jsx)(r.h3,{id:"examples",children:"Examples"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-javascript",children:"var poly = turf.polygon([\n  [\n    [0, 29],\n    [3.5, 29],\n    [2.5, 32],\n    [0, 29],\n  ],\n]);\nvar translatedPoly = turf.transformTranslate(poly, 100, 35);\n"})}),"\n","\n",(0,n.jsx)(l.A,{children:()=>(0,n.jsx)(p,{})}),"\n",(0,n.jsx)(r.h3,{id:"installation",children:"Installation"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-javascript",children:'$ npm install @turf/transform-translate\n\nimport { transformTranslate } from "@turf/transform-translate";\nconst result = transformTranslate(...);\n'})}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-javascript",children:'$ npm install @turf/turf\n\nimport * as turf from "@turf/turf";\nconst result = turf.transformTranslate(...);\n'})})]})}function y(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(m,{...e})}):m(e)}},42634:()=>{},53257:(e,r,t)=>{"use strict";t.d(r,{Rd:()=>a,o8:()=>i});var n=Object.defineProperty,o=(e,r)=>n(e,"name",{value:r,configurable:!0});function i(e){if(!e)throw new Error("geojson is required");switch(e.type){case"Feature":return s(e);case"FeatureCollection":return l(e);case"Point":case"LineString":case"Polygon":case"MultiPoint":case"MultiLineString":case"MultiPolygon":case"GeometryCollection":return c(e);default:throw new Error("unknown GeoJSON type")}}function s(e){const r={type:"Feature"};return Object.keys(e).forEach((t=>{switch(t){case"type":case"properties":case"geometry":return;default:r[t]=e[t]}})),r.properties=a(e.properties),null==e.geometry?r.geometry=null:r.geometry=c(e.geometry),r}function a(e){const r={};return e?(Object.keys(e).forEach((t=>{const n=e[t];"object"==typeof n?null===n?r[t]=null:Array.isArray(n)?r[t]=n.map((e=>e)):r[t]=a(n):r[t]=n})),r):r}function l(e){const r={type:"FeatureCollection"};return Object.keys(e).forEach((t=>{switch(t){case"type":case"features":return;default:r[t]=e[t]}})),r.features=e.features.map((e=>s(e))),r}function c(e){const r={type:e.type};return e.bbox&&(r.bbox=e.bbox),"GeometryCollection"===e.type?(r.geometries=e.geometries.map((e=>c(e))),r):(r.coordinates=d(e.coordinates),r)}function d(e){const r=e;return"object"!=typeof r[0]?r.slice():r.map((e=>d(e)))}o(i,"clone"),o(s,"cloneFeature"),o(a,"cloneProperties"),o(l,"cloneFeatureCollection"),o(c,"cloneGeometry"),o(d,"deepSlice")},83490:(e,r,t)=>{"use strict";t.d(r,{$R:()=>a,Pw:()=>u,bg:()=>d,iw:()=>c,mo:()=>l,uG:()=>s});var n=t(67149),o=Object.defineProperty,i=(e,r)=>o(e,"name",{value:r,configurable:!0});function s(e){if(!e)throw new Error("coord is required");if(!Array.isArray(e)){if("Feature"===e.type&&null!==e.geometry&&"Point"===e.geometry.type)return[...e.geometry.coordinates];if("Point"===e.type)return[...e.coordinates]}if(Array.isArray(e)&&e.length>=2&&!Array.isArray(e[0])&&!Array.isArray(e[1]))return[...e];throw new Error("coord must be GeoJSON Point or an Array of numbers")}function a(e){if(Array.isArray(e))return e;if("Feature"===e.type){if(null!==e.geometry)return e.geometry.coordinates}else if(e.coordinates)return e.coordinates;throw new Error("coords must be GeoJSON Feature, Geometry Object or an Array")}function l(e,r,t){if(!e)throw new Error("No feature passed");if(!t)throw new Error(".featureOf() requires a name");if(!e||"Feature"!==e.type||!e.geometry)throw new Error("Invalid input to "+t+", Feature with geometry required");if(!e.geometry||e.geometry.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+e.geometry.type)}function c(e,r,t){if(!e)throw new Error("No featureCollection passed");if(!t)throw new Error(".collectionOf() requires a name");if(!e||"FeatureCollection"!==e.type)throw new Error("Invalid input to "+t+", FeatureCollection required");for(const n of e.features){if(!n||"Feature"!==n.type||!n.geometry)throw new Error("Invalid input to "+t+", Feature with geometry required");if(!n.geometry||n.geometry.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+n.geometry.type)}}function d(e){return"Feature"===e.type?e.geometry:e}function u(e,r){return"FeatureCollection"===e.type?"FeatureCollection":"GeometryCollection"===e.type?"GeometryCollection":"Feature"===e.type&&null!==e.geometry?e.geometry.type:e.type}i(s,"getCoord"),i(a,"getCoords"),i((function e(r){if(r.length>1&&(0,n.Et)(r[0])&&(0,n.Et)(r[1]))return!0;if(Array.isArray(r[0])&&r[0].length)return e(r[0]);throw new Error("coordinates must only contain numbers")}),"containsNumber"),i((function(e,r,t){if(!r||!t)throw new Error("type and name required");if(!e||e.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+e.type)}),"geojsonType"),i(l,"featureOf"),i(c,"collectionOf"),i(d,"getGeom"),i(u,"getType")},89783:(e,r,t)=>{"use strict";t.d(r,{r:()=>a});var n=t(67149),o=t(83490),i=Object.defineProperty,s=(e,r)=>i(e,"name",{value:r,configurable:!0});function a(e,r,t,i={}){const s=r<0;let a=(0,n.I3)(Math.abs(r),i.units,"meters");s&&(a=-Math.abs(a));const c=(0,o.uG)(e),d=l(c,a,t);return d[0]+=d[0]-c[0]>180?-360:c[0]-d[0]>180?360:0,(0,n.zx)(d,i.properties)}function l(e,r,t,o){const i=r/(o=void 0===o?n.zX:Number(o)),s=e[0]*Math.PI/180,a=(0,n.tR)(e[1]),l=(0,n.tR)(t),c=i*Math.cos(l);let d=a+c;Math.abs(d)>Math.PI/2&&(d=d>0?Math.PI-d:-Math.PI-d);const u=Math.log(Math.tan(d/2+Math.PI/4)/Math.tan(a/2+Math.PI/4)),h=Math.abs(u)>1e-11?c/u:Math.cos(a);return[(180*(s+i*Math.sin(l)/h)/Math.PI+540)%360-180,180*d/Math.PI]}s(a,"rhumbDestination"),s(l,"calculateRhumbDestination")},45111:(e,r,t)=>{"use strict";t.d(r,{t:()=>l});var n=t(63399),o=t(67149),i=t(83490),s=t(53257),a=t(89783);function l(e,r,t,l){if(l=l||{},!(0,o.Gv)(l))throw new Error("options is invalid");var c=l.units,d=l.zTranslation,u=l.mutate;if(!e)throw new Error("geojson is required");if(null==r||isNaN(r))throw new Error("distance is required");if(d&&"number"!=typeof d&&isNaN(d))throw new Error("zTranslation is not a number");if(d=void 0!==d?d:0,0===r&&0===d)return e;if(null==t||isNaN(t))throw new Error("direction is required");return r<0&&(r=-r,t+=180),!1!==u&&void 0!==u||(e=(0,s.o8)(e)),(0,n.Fh)(e,(function(e){var n=(0,i.$R)((0,a.r)(e,r,t,{units:c}));e[0]=n[0],e[1]=n[1],d&&3===e.length&&(e[2]+=d)})),e}(0,Object.defineProperty)(l,"name",{value:"transformTranslate",configurable:!0})}}]);