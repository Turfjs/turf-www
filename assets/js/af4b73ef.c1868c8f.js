"use strict";(self.webpackChunkturf_www=self.webpackChunkturf_www||[]).push([[3935],{6997:(e,r,t)=>{t.r(r),t.d(r,{Map0:()=>x,assets:()=>h,contentTitle:()=>c,default:()=>f,frontMatter:()=>o,metadata:()=>d,toc:()=>p});var s=t(4848),n=t(8453),a=t(800),i=t(6145),l=t(8478);const o={title:"transformScale"},c=void 0,d={id:"api/transformScale",title:"transformScale",description:"Description",source:"@site/docs/api/transformScale.mdx",sourceDirName:"api",slug:"/api/transformScale",permalink:"/docs/api/transformScale",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api/transformScale.mdx",tags:[],version:"current",frontMatter:{title:"transformScale"},sidebar:"apiSidebar",previous:{title:"transformRotate",permalink:"/docs/api/transformRotate"},next:{title:"transformTranslate",permalink:"/docs/api/transformTranslate"}},h={},p=[{value:"Description",id:"description",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3},{value:"Examples",id:"examples",level:3},{value:"Installation",id:"installation",level:3}];function x(){var e=a.n1([[[0,29],[3.5,29],[2.5,32],[0,29]]]),r=a.nIv(e,3),t={poly:e,scaledPoly:r};return r.properties={stroke:"#F00","stroke-width":4},(0,s.jsx)(i.A,{addToMap:t})}function j(e){const r={a:"a",code:"code",em:"em",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h3,{id:"description",children:"Description"}),"\n",(0,s.jsx)(r.p,{children:"Scale a GeoJSON from a given point by a factor of scaling (ex: factor=2 would make the GeoJSON 200% larger).\nIf a FeatureCollection is provided, the origin point will be calculated based on each individual Feature."}),"\n",(0,s.jsx)(r.h3,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Name"}),(0,s.jsx)(r.th,{children:"Type"}),(0,s.jsx)(r.th,{children:"Description"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"geojson"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://tools.ietf.org/html/rfc7946#section-3",children:"GeoJSON"})})}),(0,s.jsx)(r.td,{children:"GeoJSON to be scaled"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"factor"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.strong,{children:"number"})}),(0,s.jsx)(r.td,{children:"of scaling, positive or negative values greater than 0"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsxs)(r.td,{children:["options",(0,s.jsx)("i",{children:"?"})]}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.strong,{children:"Object"})}),(0,s.jsxs)(r.td,{children:["Optional parameters ",(0,s.jsx)(r.em,{children:"(default {})"})]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsxs)(r.td,{children:["options.origin",(0,s.jsx)("i",{children:"?"})]}),(0,s.jsx)(r.td,{children:(0,s.jsxs)(r.strong,{children:["string | ",(0,s.jsx)(r.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1.1",children:"Coord"})]})}),(0,s.jsxs)(r.td,{children:["Point from which the scaling will occur (string options: sw/se/nw/ne/center/centroid) ",(0,s.jsx)(r.em,{children:"(default 'centroid')"})]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsxs)(r.td,{children:["options.mutate",(0,s.jsx)("i",{children:"?"})]}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.strong,{children:"boolean"})}),(0,s.jsxs)(r.td,{children:["allows GeoJSON input to be mutated (significant performance increase if true) ",(0,s.jsx)(r.em,{children:"(default false)"})]})]})]})]}),"\n",(0,s.jsx)(r.h3,{id:"returns",children:"Returns"}),"\n",(0,s.jsx)("ul",{children:(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://tools.ietf.org/html/rfc7946#section-3",children:"GeoJSON"})})," scaled GeoJSON"]})}),"\n",(0,s.jsx)(r.h3,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"var poly = turf.polygon([\n  [\n    [0, 29],\n    [3.5, 29],\n    [2.5, 32],\n    [0, 29],\n  ],\n]);\nvar scaledPoly = turf.transformScale(poly, 3);\n"})}),"\n","\n",(0,s.jsx)(l.A,{children:()=>(0,s.jsx)(x,{})}),"\n",(0,s.jsx)(r.h3,{id:"installation",children:"Installation"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'$ npm install @turf/transform-scale\n\nimport { transformScale } from "@turf/transform-scale";\nconst result = transformScale(...);\n'})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'$ npm install @turf/turf\n\nimport * as turf from "@turf/turf";\nconst result = turf.transformScale(...);\n'})})]})}function f(e={}){const{wrapper:r}={...(0,n.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(j,{...e})}):j(e)}}}]);