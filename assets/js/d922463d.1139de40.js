"use strict";(self.webpackChunkturf_www=self.webpackChunkturf_www||[]).push([[8657],{582:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>a});var r=n(4848),s=n(8453);n(800),n(6145),n(8478);const i={title:"convertLength"},l=void 0,d={id:"api/convertLength",title:"convertLength",description:"Description",source:"@site/docs/api/convertLength.mdx",sourceDirName:"api",slug:"/api/convertLength",permalink:"/docs/api/convertLength",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api/convertLength.mdx",tags:[],version:"current",frontMatter:{title:"convertLength"},sidebar:"apiSidebar",previous:{title:"convertArea",permalink:"/docs/api/convertArea"},next:{title:"degreesToRadians",permalink:"/docs/api/degreesToRadians"}},c={},a=[{value:"Description",id:"description",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3},{value:"Installation",id:"installation",level:3}];function o(e){const t={code:"code",em:"em",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h3,{id:"description",children:"Description"}),"\n",(0,r.jsx)(t.p,{children:"Converts a length to the requested unit.\nValid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet"}),"\n",(0,r.jsx)(t.h3,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Name"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"length"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"number"})}),(0,r.jsx)(t.td,{children:"to be converted"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsxs)(t.td,{children:["originalUnit",(0,r.jsx)("i",{children:"?"})]}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"Units"})}),(0,r.jsxs)(t.td,{children:["of the length ",(0,r.jsx)(t.em,{children:'(default "kilometers")'})]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsxs)(t.td,{children:["finalUnit",(0,r.jsx)("i",{children:"?"})]}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"Units"})}),(0,r.jsxs)(t.td,{children:["returned unit ",(0,r.jsx)(t.em,{children:'(default "kilometers")'})]})]})]})]}),"\n",(0,r.jsx)(t.h3,{id:"returns",children:"Returns"}),"\n",(0,r.jsx)("ul",{children:(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"number"})," the converted length"]})}),"\n",(0,r.jsx)(t.h3,{id:"installation",children:"Installation"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:'$ npm install @turf/helpers\n\nimport { convertLength } from "@turf/helpers";\nconst result = convertLength(...);\n'})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:'$ npm install @turf/turf\n\nimport * as turf from "@turf/turf";\nconst result = turf.convertLength(...);\n'})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}}}]);