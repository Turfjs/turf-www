(self.webpackChunkturf_www=self.webpackChunkturf_www||[]).push([[11868],{9404:(e,r,t)=>{"use strict";t.r(r),t.d(r,{Map0:()=>p,assets:()=>f,contentTitle:()=>u,default:()=>g,frontMatter:()=>c,metadata:()=>d,toc:()=>h});var n=t(74848),i=t(28453),s=t(67149),o=t(68088),l=t(36145),a=t(78478);const c={title:"lineOffset"},u=void 0,d={id:"api/lineOffset",title:"lineOffset",description:"Description",source:"@site/docs/api/lineOffset.mdx",sourceDirName:"api",slug:"/api/lineOffset",permalink:"/docs/next/api/lineOffset",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api/lineOffset.mdx",tags:[],version:"current",frontMatter:{title:"lineOffset"},sidebar:"apiSidebar",previous:{title:"intersect",permalink:"/docs/next/api/intersect"},next:{title:"polygonSmooth",permalink:"/docs/next/api/polygonSmooth"}},f={},h=[{value:"Description",id:"description",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3},{value:"Examples",id:"examples",level:3},{value:"Installation",id:"installation",level:3}];function p(){var e=s.wi([[-83,30],[-84,36],[-78,41]],{stroke:"#F00"}),r=o.u(e,2,{units:"miles"}),t={offsetLine:r,line:e};return r.properties.stroke="#00F",(0,n.jsx)(l.A,{addToMap:t})}function m(e){const r={a:"a",code:"code",em:"em",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h3,{id:"description",children:"Description"}),"\n",(0,n.jsxs)(r.p,{children:["Takes a ",(0,n.jsx)(r.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1.4",children:"line"})," and returns a ",(0,n.jsx)(r.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1.4",children:"line"})," at offset by the specified distance."]}),"\n",(0,n.jsx)(r.h3,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Name"}),(0,n.jsx)(r.th,{children:"Type"}),(0,n.jsx)(r.th,{children:"Description"})]})}),(0,n.jsxs)(r.tbody,{children:[(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"geojson"}),(0,n.jsx)(r.td,{children:(0,n.jsxs)(r.strong,{children:[(0,n.jsx)(r.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1",children:"Geometry"})," | ",(0,n.jsx)(r.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.2",children:"Feature"}),"<",(0,n.jsx)(r.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1.4",children:"LineString"})," | ",(0,n.jsx)(r.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1.5",children:"MultiLineString"}),">"]})}),(0,n.jsx)(r.td,{children:"input GeoJSON"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"distance"}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.strong,{children:"number"})}),(0,n.jsx)(r.td,{children:"distance to offset the line (can be of negative value)"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsxs)(r.td,{children:["options",(0,n.jsx)("i",{children:"?"})]}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.strong,{children:"Object"})}),(0,n.jsxs)(r.td,{children:["Optional parameters ",(0,n.jsx)(r.em,{children:"(default {})"})]})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsxs)(r.td,{children:["options.units",(0,n.jsx)("i",{children:"?"})]}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.strong,{children:"string"})}),(0,n.jsxs)(r.td,{children:["can be degrees, radians, miles, kilometers, inches, yards, meters ",(0,n.jsx)(r.em,{children:"(default 'kilometers')"})]})]})]})]}),"\n",(0,n.jsx)(r.h3,{id:"returns",children:"Returns"}),"\n",(0,n.jsx)("ul",{children:(0,n.jsxs)(r.p,{children:[(0,n.jsxs)(r.strong,{children:[(0,n.jsx)(r.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.2",children:"Feature"}),"<",(0,n.jsx)(r.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1.4",children:"LineString"})," | ",(0,n.jsx)(r.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1.5",children:"MultiLineString"}),">"]})," Line offset from the input line"]})}),"\n",(0,n.jsx)(r.h3,{id:"examples",children:"Examples"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-javascript",children:'var line = turf.lineString(\n  [\n    [-83, 30],\n    [-84, 36],\n    [-78, 41],\n  ],\n  { stroke: "#F00" },\n);\n\nvar offsetLine = turf.lineOffset(line, 2, { units: "miles" });\n'})}),"\n","\n",(0,n.jsx)(a.A,{children:()=>(0,n.jsx)(p,{})}),"\n",(0,n.jsx)(r.h3,{id:"installation",children:"Installation"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-javascript",children:'$ npm install @turf/line-offset\n\nimport { lineOffset } from "@turf/line-offset";\nconst result = lineOffset(...);\n'})}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-javascript",children:'$ npm install @turf/turf\n\nimport * as turf from "@turf/turf";\nconst result = turf.lineOffset(...);\n'})})]})}function g(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(m,{...e})}):m(e)}},42634:()=>{},83490:(e,r,t)=>{"use strict";t.d(r,{$R:()=>l,Pw:()=>d,bg:()=>u,iw:()=>c,mo:()=>a,uG:()=>o});var n=t(67149),i=Object.defineProperty,s=(e,r)=>i(e,"name",{value:r,configurable:!0});function o(e){if(!e)throw new Error("coord is required");if(!Array.isArray(e)){if("Feature"===e.type&&null!==e.geometry&&"Point"===e.geometry.type)return[...e.geometry.coordinates];if("Point"===e.type)return[...e.coordinates]}if(Array.isArray(e)&&e.length>=2&&!Array.isArray(e[0])&&!Array.isArray(e[1]))return[...e];throw new Error("coord must be GeoJSON Point or an Array of numbers")}function l(e){if(Array.isArray(e))return e;if("Feature"===e.type){if(null!==e.geometry)return e.geometry.coordinates}else if(e.coordinates)return e.coordinates;throw new Error("coords must be GeoJSON Feature, Geometry Object or an Array")}function a(e,r,t){if(!e)throw new Error("No feature passed");if(!t)throw new Error(".featureOf() requires a name");if(!e||"Feature"!==e.type||!e.geometry)throw new Error("Invalid input to "+t+", Feature with geometry required");if(!e.geometry||e.geometry.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+e.geometry.type)}function c(e,r,t){if(!e)throw new Error("No featureCollection passed");if(!t)throw new Error(".collectionOf() requires a name");if(!e||"FeatureCollection"!==e.type)throw new Error("Invalid input to "+t+", FeatureCollection required");for(const n of e.features){if(!n||"Feature"!==n.type||!n.geometry)throw new Error("Invalid input to "+t+", Feature with geometry required");if(!n.geometry||n.geometry.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+n.geometry.type)}}function u(e){return"Feature"===e.type?e.geometry:e}function d(e,r){return"FeatureCollection"===e.type?"FeatureCollection":"GeometryCollection"===e.type?"GeometryCollection":"Feature"===e.type&&null!==e.geometry?e.geometry.type:e.type}s(o,"getCoord"),s(l,"getCoords"),s((function e(r){if(r.length>1&&(0,n.Et)(r[0])&&(0,n.Et)(r[1]))return!0;if(Array.isArray(r[0])&&r[0].length)return e(r[0]);throw new Error("coordinates must only contain numbers")}),"containsNumber"),s((function(e,r,t){if(!r||!t)throw new Error("type and name required");if(!e||e.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+e.type)}),"geojsonType"),s(a,"featureOf"),s(c,"collectionOf"),s(u,"getGeom"),s(d,"getType")},68088:(e,r,t)=>{"use strict";t.d(r,{u:()=>g});var n=t(63399),i=t(83490),s=t(67149),o=Object.defineProperty,l=(e,r)=>o(e,"name",{value:r,configurable:!0});function a(e){var r=e[0],t=e[1];return[t[0]-r[0],t[1]-r[1]]}function c(e,r){return e[0]*r[1]-r[0]*e[1]}function u(e,r){return[e[0]+r[0],e[1]+r[1]]}function d(e,r){return[e[0]-r[0],e[1]-r[1]]}function f(e,r){return[e*r[0],e*r[1]]}function h(e,r){var t=e[0],n=a(e),i=r[0],s=a(r),o=c(n,s);return u(t,f(c(d(i,t),s)/o,n))}function p(e,r){return 0===c(a(e),a(r))}function m(e,r){return!p(e,r)&&h(e,r)}function g(e,r,t){if(t=t||{},!(0,s.Gv)(t))throw new Error("options is invalid");var o=t.units;if(!e)throw new Error("geojson is required");if(null==r||isNaN(r))throw new Error("distance is required");var l=(0,i.Pw)(e),a=e.properties;switch(l){case"LineString":return j(e,r,o);case"MultiLineString":var c=[];return(0,n.iw)(e,(function(e){c.push(j(e,r,o).geometry.coordinates)})),(0,s.NU)(c,a);default:throw new Error("geometry "+l+" is not supported")}}function j(e,r,t){var n=[],o=(0,s.vl)(r,t),l=(0,i.$R)(e),a=[];return l.forEach((function(e,r){if(r!==l.length-1){var t=x(e,l[r+1],o);if(n.push(t),r>0){var i=n[r-1],s=m(t,i);!1!==s&&(i[1]=s,t[0]=s),a.push(i[0]),r===l.length-2&&(a.push(t[0]),a.push(t[1]))}2===l.length&&(a.push(t[0]),a.push(t[1]))}})),(0,s.wi)(a,e.properties)}function x(e,r,t){var n=Math.sqrt((e[0]-r[0])*(e[0]-r[0])+(e[1]-r[1])*(e[1]-r[1])),i=e[0]+t*(r[1]-e[1])/n,s=r[0]+t*(r[1]-e[1])/n;return[[i,e[1]+t*(e[0]-r[0])/n],[s,r[1]+t*(e[0]-r[0])/n]]}l(a,"ab"),l(c,"crossProduct"),l(u,"add"),l(d,"sub"),l(f,"scalarMult"),l(h,"intersectSegments"),l(p,"isParallel"),l(m,"intersection"),l(g,"lineOffset"),l(j,"lineOffsetFeature"),l(x,"processSegment")}}]);