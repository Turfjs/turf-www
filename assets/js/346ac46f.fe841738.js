"use strict";(self.webpackChunkturf_www=self.webpackChunkturf_www||[]).push([[1980],{3144:(e,t,n)=>{n.r(t),n.d(t,{Map0:()=>p,assets:()=>h,contentTitle:()=>a,default:()=>j,frontMatter:()=>o,metadata:()=>d,toc:()=>u});var s=n(4848),r=n(8453),i=n(800),l=n(6145),c=n(8478);const o={title:"concave"},a=void 0,d={id:"api/concave",title:"concave",description:"Description",source:"@site/docs/api/concave.mdx",sourceDirName:"api",slug:"/api/concave",permalink:"/docs/api/concave",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api/concave.mdx",tags:[],version:"current",frontMatter:{title:"concave"},sidebar:"apiSidebar",previous:{title:"clone",permalink:"/docs/api/clone"},next:{title:"convex",permalink:"/docs/api/convex"}},h={},u=[{value:"Description",id:"description",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3},{value:"Examples",id:"examples",level:3},{value:"Installation",id:"installation",level:3}];function p(){var e=i.Lrk([i.zx7([-63.601226,44.642643]),i.zx7([-63.591442,44.651436]),i.zx7([-63.580799,44.648749]),i.zx7([-63.573589,44.641788]),i.zx7([-63.587665,44.64533]),i.zx7([-63.595218,44.64765])]),t={points:e,hull:i.Ms8(e,{units:"miles",maxEdge:1})};return(0,s.jsx)(l.A,{addToMap:t})}function x(e){const t={a:"a",code:"code",em:"em",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h3,{id:"description",children:"Description"}),"\n",(0,s.jsxs)(t.p,{children:["Takes a set of ",(0,s.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1.2",children:"points"})," and returns a concave hull Polygon or MultiPolygon.\nInternally, this uses ",(0,s.jsx)(t.a,{href:"https://github.com/Turfjs/turf-tin",children:"turf-tin"})," to generate geometries."]}),"\n",(0,s.jsx)(t.h3,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Name"}),(0,s.jsx)(t.th,{children:"Type"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"points"}),(0,s.jsx)(t.td,{children:(0,s.jsxs)(t.strong,{children:[(0,s.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.3",children:"FeatureCollection"}),"<",(0,s.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1.2",children:"Point"}),">"]})}),(0,s.jsx)(t.td,{children:"input points"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsxs)(t.td,{children:["options",(0,s.jsx)("i",{children:"?"})]}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"Object"})}),(0,s.jsxs)(t.td,{children:["Optional parameters ",(0,s.jsx)(t.em,{children:"(default {})"})]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsxs)(t.td,{children:["options.maxEdge",(0,s.jsx)("i",{children:"?"})]}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"number"})}),(0,s.jsxs)(t.td,{children:["the length (in 'units') of an edge necessary for part of the hull to become concave. ",(0,s.jsx)(t.em,{children:"(default Infinity)"})]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsxs)(t.td,{children:["options.units",(0,s.jsx)("i",{children:"?"})]}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"string"})}),(0,s.jsxs)(t.td,{children:["can be degrees, radians, miles, or kilometers ",(0,s.jsx)(t.em,{children:"(default 'kilometers')"})]})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"returns",children:"Returns"}),"\n",(0,s.jsx)("ul",{children:(0,s.jsxs)(t.p,{children:[(0,s.jsxs)(t.strong,{children:[(0,s.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.2",children:"Feature"}),"<",(0,s.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1.6",children:"Polygon"})," | ",(0,s.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1.7",children:"MultiPolygon"}),"> | null"]})," a concave hull (null value is returned if unable to compute hull)"]})}),"\n",(0,s.jsx)(t.h3,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:'var points = turf.featureCollection([\n  turf.point([-63.601226, 44.642643]),\n  turf.point([-63.591442, 44.651436]),\n  turf.point([-63.580799, 44.648749]),\n  turf.point([-63.573589, 44.641788]),\n  turf.point([-63.587665, 44.64533]),\n  turf.point([-63.595218, 44.64765]),\n]);\nvar options = { units: "miles", maxEdge: 1 };\n\nvar hull = turf.concave(points, options);\n'})}),"\n","\n",(0,s.jsx)(c.A,{children:()=>(0,s.jsx)(p,{})}),"\n",(0,s.jsx)(t.h3,{id:"installation",children:"Installation"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:'$ npm install @turf/concave\n\nimport { concave } from "@turf/concave";\nconst result = concave(...);\n'})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:'$ npm install @turf/turf\n\nimport * as turf from "@turf/turf";\nconst result = turf.concave(...);\n'})})]})}function j(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(x,{...e})}):x(e)}}}]);