(self.webpackChunkturf_www=self.webpackChunkturf_www||[]).push([[37098],{67147:(e,r,t)=>{"use strict";t.r(r),t.d(r,{Map0:()=>p,assets:()=>h,contentTitle:()=>d,default:()=>y,frontMatter:()=>l,metadata:()=>u,toc:()=>m});var n=t(74848),i=t(28453),s=t(67149),o=t(82),a=t(36145),c=t(78478);const l={title:"rhumbDistance"},d=void 0,u={id:"api/rhumbDistance",title:"rhumbDistance",description:"Description",source:"@site/versioned_docs/version-7.0.0/api/rhumbDistance.mdx",sourceDirName:"api",slug:"/api/rhumbDistance",permalink:"/docs/api/rhumbDistance",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/versioned_docs/version-7.0.0/api/rhumbDistance.mdx",tags:[],version:"7.0.0",frontMatter:{title:"rhumbDistance"},sidebar:"apiSidebar",previous:{title:"rhumbDestination",permalink:"/docs/api/rhumbDestination"},next:{title:"square",permalink:"/docs/api/square"}},h={},m=[{value:"Description",id:"description",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3},{value:"Examples",id:"examples",level:3},{value:"Installation",id:"installation",level:3}];function p(){var e=s.zx([-75.343,39.984]),r=s.zx([-75.534,39.123]),t=o.E(e,r,{units:"miles"}),i={from:e,to:r};return e.properties.distance=t,r.properties.distance=t,(0,n.jsx)(a.A,{addToMap:i})}function f(e){const r={a:"a",code:"code",em:"em",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h3,{id:"description",children:"Description"}),"\n",(0,n.jsxs)(r.p,{children:["Calculates the distance along a rhumb line between two ",(0,n.jsx)(r.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1.2",children:"points"})," in degrees, radians,\nmiles, or kilometers."]}),"\n",(0,n.jsx)(r.h3,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Name"}),(0,n.jsx)(r.th,{children:"Type"}),(0,n.jsx)(r.th,{children:"Description"})]})}),(0,n.jsxs)(r.tbody,{children:[(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"from"}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.strong,{children:(0,n.jsx)(r.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1.1",children:"Coord"})})}),(0,n.jsx)(r.td,{children:"origin point"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"to"}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.strong,{children:(0,n.jsx)(r.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1.1",children:"Coord"})})}),(0,n.jsx)(r.td,{children:"destination point"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsxs)(r.td,{children:["options",(0,n.jsx)("i",{children:"?"})]}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.strong,{children:"Object"})}),(0,n.jsx)(r.td,{children:"Optional parameters"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsxs)(r.td,{children:["options.units",(0,n.jsx)("i",{children:"?"})]}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.strong,{children:"string"})}),(0,n.jsxs)(r.td,{children:["can be degrees, radians, miles, or kilometers ",(0,n.jsx)(r.em,{children:'(default "kilometers")'})]})]})]})]}),"\n",(0,n.jsx)(r.h3,{id:"returns",children:"Returns"}),"\n",(0,n.jsx)("ul",{children:(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.strong,{children:"number"})," distance between the two points"]})}),"\n",(0,n.jsx)(r.h3,{id:"examples",children:"Examples"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-javascript",children:'var from = turf.point([-75.343, 39.984]);\nvar to = turf.point([-75.534, 39.123]);\nvar options = { units: "miles" };\n\nvar distance = turf.rhumbDistance(from, to, options);\n'})}),"\n","\n",(0,n.jsx)(c.A,{children:()=>(0,n.jsx)(p,{})}),"\n",(0,n.jsx)(r.h3,{id:"installation",children:"Installation"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-javascript",children:'$ npm install @turf/rhumb-distance\n\nimport { rhumbDistance } from "@turf/rhumb-distance";\nconst result = rhumbDistance(...);\n'})}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-javascript",children:'$ npm install @turf/turf\n\nimport * as turf from "@turf/turf";\nconst result = turf.rhumbDistance(...);\n'})})]})}function y(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(f,{...e})}):f(e)}},42634:()=>{},83490:(e,r,t)=>{"use strict";t.d(r,{$R:()=>a,Pw:()=>u,bg:()=>d,iw:()=>l,mo:()=>c,uG:()=>o});var n=t(67149),i=Object.defineProperty,s=(e,r)=>i(e,"name",{value:r,configurable:!0});function o(e){if(!e)throw new Error("coord is required");if(!Array.isArray(e)){if("Feature"===e.type&&null!==e.geometry&&"Point"===e.geometry.type)return[...e.geometry.coordinates];if("Point"===e.type)return[...e.coordinates]}if(Array.isArray(e)&&e.length>=2&&!Array.isArray(e[0])&&!Array.isArray(e[1]))return[...e];throw new Error("coord must be GeoJSON Point or an Array of numbers")}function a(e){if(Array.isArray(e))return e;if("Feature"===e.type){if(null!==e.geometry)return e.geometry.coordinates}else if(e.coordinates)return e.coordinates;throw new Error("coords must be GeoJSON Feature, Geometry Object or an Array")}function c(e,r,t){if(!e)throw new Error("No feature passed");if(!t)throw new Error(".featureOf() requires a name");if(!e||"Feature"!==e.type||!e.geometry)throw new Error("Invalid input to "+t+", Feature with geometry required");if(!e.geometry||e.geometry.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+e.geometry.type)}function l(e,r,t){if(!e)throw new Error("No featureCollection passed");if(!t)throw new Error(".collectionOf() requires a name");if(!e||"FeatureCollection"!==e.type)throw new Error("Invalid input to "+t+", FeatureCollection required");for(const n of e.features){if(!n||"Feature"!==n.type||!n.geometry)throw new Error("Invalid input to "+t+", Feature with geometry required");if(!n.geometry||n.geometry.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+n.geometry.type)}}function d(e){return"Feature"===e.type?e.geometry:e}function u(e,r){return"FeatureCollection"===e.type?"FeatureCollection":"GeometryCollection"===e.type?"GeometryCollection":"Feature"===e.type&&null!==e.geometry?e.geometry.type:e.type}s(o,"getCoord"),s(a,"getCoords"),s((function e(r){if(r.length>1&&(0,n.Et)(r[0])&&(0,n.Et)(r[1]))return!0;if(Array.isArray(r[0])&&r[0].length)return e(r[0]);throw new Error("coordinates must only contain numbers")}),"containsNumber"),s((function(e,r,t){if(!r||!t)throw new Error("type and name required");if(!e||e.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+e.type)}),"geojsonType"),s(c,"featureOf"),s(l,"collectionOf"),s(d,"getGeom"),s(u,"getType")},82:(e,r,t)=>{"use strict";t.d(r,{E:()=>a});var n=t(67149),i=t(83490),s=Object.defineProperty,o=(e,r)=>s(e,"name",{value:r,configurable:!0});function a(e,r,t={}){const s=(0,i.uG)(e),o=(0,i.uG)(r);o[0]+=o[0]-s[0]>180?-360:s[0]-o[0]>180?360:0;const a=c(s,o);return(0,n.I3)(a,"meters",t.units)}function c(e,r,t){const i=t=void 0===t?n.zX:Number(t),s=e[1]*Math.PI/180,o=r[1]*Math.PI/180,a=o-s;let c=Math.abs(r[0]-e[0])*Math.PI/180;c>Math.PI&&(c-=2*Math.PI);const l=Math.log(Math.tan(o/2+Math.PI/4)/Math.tan(s/2+Math.PI/4)),d=Math.abs(l)>1e-11?a/l:Math.cos(s);return Math.sqrt(a*a+d*d*c*c)*i}o(a,"rhumbDistance"),o(c,"calculateRhumbDistance")}}]);