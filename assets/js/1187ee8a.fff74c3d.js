(self.webpackChunkturf_www=self.webpackChunkturf_www||[]).push([[28085],{76368:(e,t,r)=>{"use strict";r.r(t),r.d(t,{Map0:()=>f,assets:()=>u,contentTitle:()=>c,default:()=>j,frontMatter:()=>l,metadata:()=>h,toc:()=>p});var n=r(74848),i=r(28453),s=r(67149),o=r(4170),a=r(36145),d=r(78478);const l={title:"destination"},c=void 0,h={id:"api/destination",title:"destination",description:"Description",source:"@site/versioned_docs/version-7.0.0/api/destination.mdx",sourceDirName:"api",slug:"/api/destination",permalink:"/docs/api/destination",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/versioned_docs/version-7.0.0/api/destination.mdx",tags:[],version:"7.0.0",frontMatter:{title:"destination"},sidebar:"apiSidebar",previous:{title:"centroid",permalink:"/docs/api/centroid"},next:{title:"distance",permalink:"/docs/api/distance"}},u={},p=[{value:"Description",id:"description",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3},{value:"Examples",id:"examples",level:3},{value:"Installation",id:"installation",level:3}];function f(){var e=s.zx([-75.343,39.984]),t=o.j(e,50,90,{units:"miles"}),r={point:e,destination:t};return t.properties["marker-color"]="#f00",e.properties["marker-color"]="#0f0",(0,n.jsx)(a.A,{addToMap:r})}function m(e){const t={a:"a",code:"code",em:"em",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h3,{id:"description",children:"Description"}),"\n",(0,n.jsxs)(t.p,{children:["Takes a ",(0,n.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1.2",children:"Point"})," and calculates the location of a destination point given a distance in\ndegrees, radians, miles, or kilometers; and bearing in degrees.\nThis uses the ",(0,n.jsx)(t.a,{href:"http://en.wikipedia.org/wiki/Haversine_formula",children:"Haversine formula"})," to account for global curvature."]}),"\n",(0,n.jsx)(t.h3,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"origin"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.strong,{children:(0,n.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1.1",children:"Coord"})})}),(0,n.jsx)(t.td,{children:"starting point"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"distance"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.strong,{children:"number"})}),(0,n.jsx)(t.td,{children:"distance from the origin point"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"bearing"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.strong,{children:"number"})}),(0,n.jsx)(t.td,{children:"ranging from -180 to 180"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsxs)(t.td,{children:["options",(0,n.jsx)("i",{children:"?"})]}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.strong,{children:"Object"})}),(0,n.jsxs)(t.td,{children:["Optional parameters ",(0,n.jsx)(t.em,{children:"(default {})"})]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsxs)(t.td,{children:["options.units",(0,n.jsx)("i",{children:"?"})]}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.strong,{children:"string"})}),(0,n.jsxs)(t.td,{children:["miles, kilometers, degrees, or radians ",(0,n.jsx)(t.em,{children:"(default 'kilometers')"})]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsxs)(t.td,{children:["options.properties",(0,n.jsx)("i",{children:"?"})]}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.strong,{children:"Object"})}),(0,n.jsxs)(t.td,{children:["Translate properties to Point ",(0,n.jsx)(t.em,{children:"(default {})"})]})]})]})]}),"\n",(0,n.jsx)(t.h3,{id:"returns",children:"Returns"}),"\n",(0,n.jsx)("ul",{children:(0,n.jsxs)(t.p,{children:[(0,n.jsxs)(t.strong,{children:[(0,n.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.2",children:"Feature"}),"<",(0,n.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1.2",children:"Point"}),">"]})," destination point"]})}),"\n",(0,n.jsx)(t.h3,{id:"examples",children:"Examples"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:'var point = turf.point([-75.343, 39.984]);\nvar distance = 50;\nvar bearing = 90;\nvar options = { units: "miles" };\n\nvar destination = turf.destination(point, distance, bearing, options);\n'})}),"\n","\n",(0,n.jsx)(d.A,{children:()=>(0,n.jsx)(f,{})}),"\n",(0,n.jsx)(t.h3,{id:"installation",children:"Installation"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:'$ npm install @turf/destination\n\nimport { destination } from "@turf/destination";\nconst result = destination(...);\n'})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:'$ npm install @turf/turf\n\nimport * as turf from "@turf/turf";\nconst result = turf.destination(...);\n'})})]})}function j(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(m,{...e})}):m(e)}},42634:()=>{},4170:(e,t,r)=>{"use strict";r.d(t,{j:()=>s});var n=r(67149),i=r(83490);function s(e,t,r,s={}){const o=(0,i.uG)(e),a=(0,n.tR)(o[0]),d=(0,n.tR)(o[1]),l=(0,n.tR)(r),c=(0,n.Gf)(t,s.units),h=Math.asin(Math.sin(d)*Math.cos(c)+Math.cos(d)*Math.sin(c)*Math.cos(l)),u=a+Math.atan2(Math.sin(l)*Math.sin(c)*Math.cos(d),Math.cos(c)-Math.sin(d)*Math.sin(h)),p=(0,n.nv)(u),f=(0,n.nv)(h);return(0,n.zx)([p,f],s.properties)}(0,Object.defineProperty)(s,"name",{value:"destination",configurable:!0})},83490:(e,t,r)=>{"use strict";r.d(t,{$R:()=>a,Pw:()=>h,bg:()=>c,iw:()=>l,mo:()=>d,uG:()=>o});var n=r(67149),i=Object.defineProperty,s=(e,t)=>i(e,"name",{value:t,configurable:!0});function o(e){if(!e)throw new Error("coord is required");if(!Array.isArray(e)){if("Feature"===e.type&&null!==e.geometry&&"Point"===e.geometry.type)return[...e.geometry.coordinates];if("Point"===e.type)return[...e.coordinates]}if(Array.isArray(e)&&e.length>=2&&!Array.isArray(e[0])&&!Array.isArray(e[1]))return[...e];throw new Error("coord must be GeoJSON Point or an Array of numbers")}function a(e){if(Array.isArray(e))return e;if("Feature"===e.type){if(null!==e.geometry)return e.geometry.coordinates}else if(e.coordinates)return e.coordinates;throw new Error("coords must be GeoJSON Feature, Geometry Object or an Array")}function d(e,t,r){if(!e)throw new Error("No feature passed");if(!r)throw new Error(".featureOf() requires a name");if(!e||"Feature"!==e.type||!e.geometry)throw new Error("Invalid input to "+r+", Feature with geometry required");if(!e.geometry||e.geometry.type!==t)throw new Error("Invalid input to "+r+": must be a "+t+", given "+e.geometry.type)}function l(e,t,r){if(!e)throw new Error("No featureCollection passed");if(!r)throw new Error(".collectionOf() requires a name");if(!e||"FeatureCollection"!==e.type)throw new Error("Invalid input to "+r+", FeatureCollection required");for(const n of e.features){if(!n||"Feature"!==n.type||!n.geometry)throw new Error("Invalid input to "+r+", Feature with geometry required");if(!n.geometry||n.geometry.type!==t)throw new Error("Invalid input to "+r+": must be a "+t+", given "+n.geometry.type)}}function c(e){return"Feature"===e.type?e.geometry:e}function h(e,t){return"FeatureCollection"===e.type?"FeatureCollection":"GeometryCollection"===e.type?"GeometryCollection":"Feature"===e.type&&null!==e.geometry?e.geometry.type:e.type}s(o,"getCoord"),s(a,"getCoords"),s((function e(t){if(t.length>1&&(0,n.Et)(t[0])&&(0,n.Et)(t[1]))return!0;if(Array.isArray(t[0])&&t[0].length)return e(t[0]);throw new Error("coordinates must only contain numbers")}),"containsNumber"),s((function(e,t,r){if(!t||!r)throw new Error("type and name required");if(!e||e.type!==t)throw new Error("Invalid input to "+r+": must be a "+t+", given "+e.type)}),"geojsonType"),s(d,"featureOf"),s(l,"collectionOf"),s(c,"getGeom"),s(h,"getType")}}]);