"use strict";(self.webpackChunkturf_www=self.webpackChunkturf_www||[]).push([[4694],{8141:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var i=n(4848),s=n(8453);n(800),n(6145),n(8478);const r={title:"pointToLineDistance"},a=void 0,l={id:"api/pointToLineDistance",title:"pointToLineDistance",description:"Description",source:"@site/docs/api/pointToLineDistance.mdx",sourceDirName:"api",slug:"/api/pointToLineDistance",permalink:"/docs/api/pointToLineDistance",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api/pointToLineDistance.mdx",tags:[],version:"current",frontMatter:{title:"pointToLineDistance"},sidebar:"apiSidebar",previous:{title:"pointOnFeature",permalink:"/docs/api/pointOnFeature"},next:{title:"polygonTangents",permalink:"/docs/api/polygonTangents"}},o={},c=[{value:"Description",id:"description",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3},{value:"Examples",id:"examples",level:3},{value:"Installation",id:"installation",level:3}];function d(e){const t={a:"a",code:"code",em:"em",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h3,{id:"description",children:"Description"}),"\n",(0,i.jsxs)(t.p,{children:["Returns the minimum distance between a ",(0,i.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1.2",children:"Point"})," and a ",(0,i.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1.4",children:"LineString"}),", being the distance from a line the\nminimum distance between the point and any segment of the ",(0,i.jsx)(t.code,{children:"LineString"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Name"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"pt"}),(0,i.jsx)(t.td,{children:(0,i.jsxs)(t.strong,{children:[(0,i.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.2",children:"Feature"}),"<",(0,i.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1.2",children:"Point"}),"> | Array<number>"]})}),(0,i.jsx)(t.td,{children:"Feature or Geometry"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"line"}),(0,i.jsx)(t.td,{children:(0,i.jsxs)(t.strong,{children:[(0,i.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.2",children:"Feature"}),"<",(0,i.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1.4",children:"LineString"}),">"]})}),(0,i.jsx)(t.td,{children:"GeoJSON Feature or Geometry"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsxs)(t.td,{children:["options",(0,i.jsx)("i",{children:"?"})]}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.strong,{children:"Object"})}),(0,i.jsxs)(t.td,{children:["Optional parameters ",(0,i.jsx)(t.em,{children:"(default {})"})]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsxs)(t.td,{children:["options.units",(0,i.jsx)("i",{children:"?"})]}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.strong,{children:"string"})}),(0,i.jsxs)(t.td,{children:["can be anything supported by turf/convertLength (ex: degrees, radians, miles, or kilometers) ",(0,i.jsx)(t.em,{children:'(default "kilometers")'})]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsxs)(t.td,{children:["options.method",(0,i.jsx)("i",{children:"?"})]}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.strong,{children:"string"})}),(0,i.jsxs)(t.td,{children:["wether to calculate the distance based on geodesic (spheroid) or planar (flat) method. Valid options are 'geodesic' or 'planar'. ",(0,i.jsx)(t.em,{children:'(default "geodesic")'})]})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"returns",children:"Returns"}),"\n",(0,i.jsx)("ul",{children:(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"number"})," distance between point and line"]})}),"\n",(0,i.jsx)(t.h3,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:'var pt = turf.point([0, 0]);\nvar line = turf.lineString([\n  [1, 1],\n  [-1, 1],\n]);\n\nvar distance = turf.pointToLineDistance(pt, line, { units: "miles" });\n//=69.11854715938406\n'})}),"\n",(0,i.jsx)(t.h3,{id:"installation",children:"Installation"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:'$ npm install @turf/point-to-line-distance\n\nimport { pointToLineDistance } from "@turf/point-to-line-distance";\nconst result = pointToLineDistance(...);\n'})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:'$ npm install @turf/turf\n\nimport * as turf from "@turf/turf";\nconst result = turf.pointToLineDistance(...);\n'})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);