(self.webpackChunkturf_www=self.webpackChunkturf_www||[]).push([[22884],{32398:(e,t,r)=>{"use strict";r.r(t),r.d(t,{Map0:()=>u,assets:()=>x,contentTitle:()=>h,default:()=>f,frontMatter:()=>c,metadata:()=>p,toc:()=>j});var n=r(74848),s=r(28453),i=r(84245),l=r(63399),d=r(70799),o=r(36145),a=r(78478);const c={title:"interpolate"},h=void 0,p={id:"api/interpolate",title:"interpolate",description:"Description",source:"@site/docs/api/interpolate.mdx",sourceDirName:"api",slug:"/api/interpolate",permalink:"/docs/next/api/interpolate",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api/interpolate.mdx",tags:[],version:"current",frontMatter:{title:"interpolate"},sidebar:"apiSidebar",previous:{title:"sample",permalink:"/docs/next/api/sample"},next:{title:"isobands",permalink:"/docs/next/api/isobands"}},x={},j=[{value:"Description",id:"description",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3},{value:"Examples",id:"examples",level:3},{value:"Installation",id:"installation",level:3}];function u(){var e=i._e(30,{bbox:[50,30,70,50]});l.us(e,(function(e){e.properties.solRad=50*Math.random()}));var t={grid:d.G(e,100,{gridType:"points",property:"solRad",units:"miles"})};return(0,n.jsx)(o.A,{addToMap:t})}function m(e){const t={a:"a",code:"code",em:"em",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h3,{id:"description",children:"Description"}),"\n",(0,n.jsxs)(t.p,{children:["Takes a set of points and estimates their 'property' values on a grid using the ",(0,n.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Inverse_distance_weighting",children:"Inverse Distance Weighting (IDW) method"}),"."]}),"\n",(0,n.jsx)(t.h3,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"points"}),(0,n.jsx)(t.td,{children:(0,n.jsxs)(t.strong,{children:[(0,n.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.3",children:"FeatureCollection"}),"<",(0,n.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1.2",children:"Point"}),">"]})}),(0,n.jsx)(t.td,{children:"with known value"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"cellSize"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.strong,{children:"number"})}),(0,n.jsx)(t.td,{children:"the distance across each grid point"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsxs)(t.td,{children:["options",(0,n.jsx)("i",{children:"?"})]}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.strong,{children:"Object"})}),(0,n.jsxs)(t.td,{children:["Optional parameters ",(0,n.jsx)(t.em,{children:"(default {})"})]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsxs)(t.td,{children:["options.gridType",(0,n.jsx)("i",{children:"?"})]}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.strong,{children:"string"})}),(0,n.jsxs)(t.td,{children:["defines the output format based on a Grid Type (options: 'square' | 'point' | 'hex' | 'triangle') ",(0,n.jsx)(t.em,{children:"(default 'square')"})]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsxs)(t.td,{children:["options.property",(0,n.jsx)("i",{children:"?"})]}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.strong,{children:"string"})}),(0,n.jsxs)(t.td,{children:["the property name in ",(0,n.jsx)(t.code,{children:"points"})," from which z-values will be pulled, zValue fallbacks to 3rd coordinate if no property exists. ",(0,n.jsx)(t.em,{children:"(default 'elevation')"})]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsxs)(t.td,{children:["options.units",(0,n.jsx)("i",{children:"?"})]}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.strong,{children:"string"})}),(0,n.jsxs)(t.td,{children:["used in calculating cellSize, can be degrees, radians, miles, or kilometers ",(0,n.jsx)(t.em,{children:"(default 'kilometers')"})]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsxs)(t.td,{children:["options.weight",(0,n.jsx)("i",{children:"?"})]}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.strong,{children:"number"})}),(0,n.jsxs)(t.td,{children:["exponent regulating the distance-decay weighting ",(0,n.jsx)(t.em,{children:"(default 1)"})]})]})]})]}),"\n",(0,n.jsx)(t.h3,{id:"returns",children:"Returns"}),"\n",(0,n.jsx)("ul",{children:(0,n.jsxs)(t.p,{children:[(0,n.jsxs)(t.strong,{children:[(0,n.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.3",children:"FeatureCollection"}),"<",(0,n.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1.2",children:"Point"})," | ",(0,n.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1.6",children:"Polygon"}),">"]})," grid of points or polygons with interpolated 'property'"]})}),"\n",(0,n.jsx)(t.h3,{id:"examples",children:"Examples"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:'var points = turf.randomPoint(30, { bbox: [50, 30, 70, 50] });\n\n// add a random property to each point\nturf.featureEach(points, function (point) {\n  point.properties.solRad = Math.random() * 50;\n});\nvar options = { gridType: "points", property: "solRad", units: "miles" };\nvar grid = turf.interpolate(points, 100, options);\n'})}),"\n","\n",(0,n.jsx)(a.A,{children:()=>(0,n.jsx)(u,{})}),"\n",(0,n.jsx)(t.h3,{id:"installation",children:"Installation"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:'$ npm install @turf/interpolate\n\nimport { interpolate } from "@turf/interpolate";\nconst result = interpolate(...);\n'})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:'$ npm install @turf/turf\n\nimport * as turf from "@turf/turf";\nconst result = turf.interpolate(...);\n'})})]})}function f(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(m,{...e})}):m(e)}},42634:()=>{}}]);