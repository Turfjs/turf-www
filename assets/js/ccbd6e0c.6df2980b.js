"use strict";(self.webpackChunkturf_www=self.webpackChunkturf_www||[]).push([[871],{9493:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>a,toc:()=>o});var s=r(4848),n=r(8453);r(800),r(6145),r(8478);const l={title:"getCluster"},i=void 0,a={id:"api/getCluster",title:"getCluster",description:"Description",source:"@site/docs/api/getCluster.mdx",sourceDirName:"api",slug:"/api/getCluster",permalink:"/docs/api/getCluster",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api/getCluster.mdx",tags:[],version:"current",frontMatter:{title:"getCluster"},sidebar:"apiSidebar",previous:{title:"geomReduce",permalink:"/docs/api/geomReduce"},next:{title:"getCoord",permalink:"/docs/api/getCoord"}},c={},o=[{value:"Description",id:"description",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3},{value:"Examples",id:"examples",level:3},{value:"Installation",id:"installation",level:3}];function d(e){const t={a:"a",code:"code",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h3,{id:"description",children:"Description"}),"\n",(0,s.jsx)(t.p,{children:"Get Cluster"}),"\n",(0,s.jsx)(t.h3,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Name"}),(0,s.jsx)(t.th,{children:"Type"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"geojson"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.3",children:"FeatureCollection"})})}),(0,s.jsx)(t.td,{children:"GeoJSON Features"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"filter"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"*"})}),(0,s.jsx)(t.td,{children:"Filter used on GeoJSON properties to get Cluster"})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"returns",children:"Returns"}),"\n",(0,s.jsx)("ul",{children:(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.3",children:"FeatureCollection"})})," Single Cluster filtered by GeoJSON Properties"]})}),"\n",(0,s.jsx)(t.h3,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:'var geojson = turf.featureCollection([\n  turf.point([0, 0], { "marker-symbol": "circle" }),\n  turf.point([2, 4], { "marker-symbol": "star" }),\n  turf.point([3, 6], { "marker-symbol": "star" }),\n  turf.point([5, 1], { "marker-symbol": "square" }),\n  turf.point([4, 2], { "marker-symbol": "circle" }),\n]);\n\n// Create a cluster using K-Means (adds `cluster` to GeoJSON properties)\nvar clustered = turf.clustersKmeans(geojson);\n\n// Retrieve first cluster (0)\nvar cluster = turf.getCluster(clustered, { cluster: 0 });\n//= cluster\n\n// Retrieve cluster based on custom properties\nturf.getCluster(clustered, { "marker-symbol": "circle" }).length;\n//= 2\nturf.getCluster(clustered, { "marker-symbol": "square" }).length;\n//= 1\n'})}),"\n",(0,s.jsx)(t.h3,{id:"installation",children:"Installation"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:'$ npm install @turf/clusters\n\nimport { getCluster } from "@turf/clusters";\nconst result = getCluster(...);\n'})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:'$ npm install @turf/turf\n\nimport * as turf from "@turf/turf";\nconst result = turf.getCluster(...);\n'})})]})}function u(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);