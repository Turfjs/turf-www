"use strict";(self.webpackChunkturf_www=self.webpackChunkturf_www||[]).push([[2017],{5678:(e,t,n)=>{n.r(t),n.d(t,{Map0:()=>x,assets:()=>h,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>d,toc:()=>p});var s=n(4848),r=n(8453),i=n(800),l=n(6145),o=n(8478);const a={title:"nearestPointOnLine"},c=void 0,d={id:"api/nearestPointOnLine",title:"nearestPointOnLine",description:"Description",source:"@site/docs/api/nearestPointOnLine.mdx",sourceDirName:"api",slug:"/api/nearestPointOnLine",permalink:"/docs/api/nearestPointOnLine",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api/nearestPointOnLine.mdx",tags:[],version:"current",frontMatter:{title:"nearestPointOnLine"},sidebar:"apiSidebar",previous:{title:"mask",permalink:"/docs/api/mask"},next:{title:"sector",permalink:"/docs/api/sector"}},h={},p=[{value:"Description",id:"description",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3},{value:"Examples",id:"examples",level:3},{value:"Installation",id:"installation",level:3}];function x(){var e=i.wiw([[-77.031669,38.878605],[-77.029609,38.881946],[-77.020339,38.884084],[-77.025661,38.885821],[-77.021884,38.889563],[-77.019824,38.892368]]),t=i.zx7([-77.037076,38.884017]),n=i.W1F(e,t,{units:"miles"}),r={line:e,pt:t,snapped:n};return n.properties["marker-color"]="#00f",(0,s.jsx)(l.A,{addToMap:r})}function j(e){const t={a:"a",code:"code",em:"em",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h3,{id:"description",children:"Description"}),"\n",(0,s.jsxs)(t.p,{children:["Takes a ",(0,s.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1.2",children:"Point"})," and a ",(0,s.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1.4",children:"LineString"})," and calculates the closest Point on the (Multi)LineString."]}),"\n",(0,s.jsx)(t.h3,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Name"}),(0,s.jsx)(t.th,{children:"Type"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"lines"}),(0,s.jsx)(t.td,{children:(0,s.jsxs)(t.strong,{children:[(0,s.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1",children:"Geometry"})," | ",(0,s.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.2",children:"Feature"}),"<",(0,s.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1.4",children:"LineString"})," | ",(0,s.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1.5",children:"MultiLineString"}),">"]})}),(0,s.jsx)(t.td,{children:"lines to snap to"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"pt"}),(0,s.jsx)(t.td,{children:(0,s.jsxs)(t.strong,{children:[(0,s.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1",children:"Geometry"})," | ",(0,s.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.2",children:"Feature"}),"<",(0,s.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1.2",children:"Point"}),"> | Array<number>"]})}),(0,s.jsx)(t.td,{children:"point to snap from"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsxs)(t.td,{children:["options",(0,s.jsx)("i",{children:"?"})]}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"Object"})}),(0,s.jsxs)(t.td,{children:["Optional parameters ",(0,s.jsx)(t.em,{children:"(default {})"})]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsxs)(t.td,{children:["options.units",(0,s.jsx)("i",{children:"?"})]}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"string"})}),(0,s.jsxs)(t.td,{children:["can be degrees, radians, miles, or kilometers ",(0,s.jsx)(t.em,{children:"(default 'kilometers')"})]})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"returns",children:"Returns"}),"\n",(0,s.jsx)("ul",{children:(0,s.jsxs)(t.p,{children:[(0,s.jsxs)(t.strong,{children:[(0,s.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.2",children:"Feature"}),"<",(0,s.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1.2",children:"Point"}),">"]})," closest point on the ",(0,s.jsx)(t.code,{children:"line"})," to ",(0,s.jsx)(t.code,{children:"point"}),". The properties object will contain three values: ",(0,s.jsx)(t.code,{children:"index"}),": closest point was found on nth line part, ",(0,s.jsx)(t.code,{children:"dist"}),": distance between pt and the closest point, ",(0,s.jsx)(t.code,{children:"location"}),": distance along the line between start and the closest point."]})}),"\n",(0,s.jsx)(t.h3,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:'var line = turf.lineString([\n  [-77.031669, 38.878605],\n  [-77.029609, 38.881946],\n  [-77.020339, 38.884084],\n  [-77.025661, 38.885821],\n  [-77.021884, 38.889563],\n  [-77.019824, 38.892368],\n]);\nvar pt = turf.point([-77.037076, 38.884017]);\n\nvar snapped = turf.nearestPointOnLine(line, pt, { units: "miles" });\n'})}),"\n","\n",(0,s.jsx)(o.A,{children:()=>(0,s.jsx)(x,{})}),"\n",(0,s.jsx)(t.h3,{id:"installation",children:"Installation"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:'$ npm install @turf/nearest-point-on-line\n\nimport { nearestPointOnLine } from "@turf/nearest-point-on-line";\nconst result = nearestPointOnLine(...);\n'})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:'$ npm install @turf/turf\n\nimport * as turf from "@turf/turf";\nconst result = turf.nearestPointOnLine(...);\n'})})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(j,{...e})}):j(e)}}}]);