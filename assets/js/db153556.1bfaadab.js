(self.webpackChunkturf_www=self.webpackChunkturf_www||[]).push([[25050],{73713:(e,r,t)=>{"use strict";t.r(r),t.d(r,{Map0:()=>f,assets:()=>h,contentTitle:()=>u,default:()=>g,frontMatter:()=>c,metadata:()=>d,toc:()=>p});var n=t(74848),o=t(28453),i=t(67149),s=t(24838),l=t(36145),a=t(78478);const c={title:"lineSegment"},u=void 0,d={id:"api/lineSegment",title:"lineSegment",description:"Description",source:"@site/versioned_docs/version-7.0.0/api/lineSegment.mdx",sourceDirName:"api",slug:"/api/lineSegment",permalink:"/docs/api/lineSegment",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/versioned_docs/version-7.0.0/api/lineSegment.mdx",tags:[],version:"7.0.0",frontMatter:{title:"lineSegment"},sidebar:"apiSidebar",previous:{title:"lineOverlap",permalink:"/docs/api/lineOverlap"},next:{title:"lineSlice",permalink:"/docs/api/lineSlice"}},h={},p=[{value:"Description",id:"description",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3},{value:"Examples",id:"examples",level:3},{value:"Installation",id:"installation",level:3}];function f(){var e=i.n1([[[-50,5],[-40,-10],[-50,-10],[-40,5],[-50,5]]]),r={polygon:e,segments:s.w(e)};return(0,n.jsx)(l.A,{addToMap:r})}function m(e){const r={a:"a",code:"code",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h3,{id:"description",children:"Description"}),"\n",(0,n.jsxs)(r.p,{children:["Creates a ",(0,n.jsx)(r.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.3",children:"FeatureCollection"})," of 2-vertex ",(0,n.jsx)(r.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1.4",children:"LineString"})," segments from a\n",(0,n.jsx)(r.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1.4",children:"(Multi)LineString"})," or ",(0,n.jsx)(r.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1.6",children:"(Multi)Polygon"}),"."]}),"\n",(0,n.jsx)(r.h3,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Name"}),(0,n.jsx)(r.th,{children:"Type"}),(0,n.jsx)(r.th,{children:"Description"})]})}),(0,n.jsx)(r.tbody,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"geojson"}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.strong,{children:(0,n.jsx)(r.a,{href:"https://tools.ietf.org/html/rfc7946#section-3",children:"GeoJSON"})})}),(0,n.jsx)(r.td,{children:"GeoJSON Polygon or LineString"})]})})]}),"\n",(0,n.jsx)(r.h3,{id:"returns",children:"Returns"}),"\n",(0,n.jsx)("ul",{children:(0,n.jsxs)(r.p,{children:[(0,n.jsxs)(r.strong,{children:[(0,n.jsx)(r.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.3",children:"FeatureCollection"}),"<",(0,n.jsx)(r.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1.4",children:"LineString"}),">"]})," 2-vertex line segments"]})}),"\n",(0,n.jsx)(r.h3,{id:"examples",children:"Examples"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-javascript",children:"var polygon = turf.polygon([\n  [\n    [-50, 5],\n    [-40, -10],\n    [-50, -10],\n    [-40, 5],\n    [-50, 5],\n  ],\n]);\nvar segments = turf.lineSegment(polygon);\n"})}),"\n","\n",(0,n.jsx)(a.A,{children:()=>(0,n.jsx)(f,{})}),"\n",(0,n.jsx)(r.h3,{id:"installation",children:"Installation"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-javascript",children:'$ npm install @turf/line-segment\n\nimport { lineSegment } from "@turf/line-segment";\nconst result = lineSegment(...);\n'})}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-javascript",children:'$ npm install @turf/turf\n\nimport * as turf from "@turf/turf";\nconst result = turf.lineSegment(...);\n'})})]})}function g(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(m,{...e})}):m(e)}},42634:()=>{},83490:(e,r,t)=>{"use strict";t.d(r,{$R:()=>l,Pw:()=>d,bg:()=>u,iw:()=>c,mo:()=>a,uG:()=>s});var n=t(67149),o=Object.defineProperty,i=(e,r)=>o(e,"name",{value:r,configurable:!0});function s(e){if(!e)throw new Error("coord is required");if(!Array.isArray(e)){if("Feature"===e.type&&null!==e.geometry&&"Point"===e.geometry.type)return[...e.geometry.coordinates];if("Point"===e.type)return[...e.coordinates]}if(Array.isArray(e)&&e.length>=2&&!Array.isArray(e[0])&&!Array.isArray(e[1]))return[...e];throw new Error("coord must be GeoJSON Point or an Array of numbers")}function l(e){if(Array.isArray(e))return e;if("Feature"===e.type){if(null!==e.geometry)return e.geometry.coordinates}else if(e.coordinates)return e.coordinates;throw new Error("coords must be GeoJSON Feature, Geometry Object or an Array")}function a(e,r,t){if(!e)throw new Error("No feature passed");if(!t)throw new Error(".featureOf() requires a name");if(!e||"Feature"!==e.type||!e.geometry)throw new Error("Invalid input to "+t+", Feature with geometry required");if(!e.geometry||e.geometry.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+e.geometry.type)}function c(e,r,t){if(!e)throw new Error("No featureCollection passed");if(!t)throw new Error(".collectionOf() requires a name");if(!e||"FeatureCollection"!==e.type)throw new Error("Invalid input to "+t+", FeatureCollection required");for(const n of e.features){if(!n||"Feature"!==n.type||!n.geometry)throw new Error("Invalid input to "+t+", Feature with geometry required");if(!n.geometry||n.geometry.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+n.geometry.type)}}function u(e){return"Feature"===e.type?e.geometry:e}function d(e,r){return"FeatureCollection"===e.type?"FeatureCollection":"GeometryCollection"===e.type?"GeometryCollection":"Feature"===e.type&&null!==e.geometry?e.geometry.type:e.type}i(s,"getCoord"),i(l,"getCoords"),i((function e(r){if(r.length>1&&(0,n.Et)(r[0])&&(0,n.Et)(r[1]))return!0;if(Array.isArray(r[0])&&r[0].length)return e(r[0]);throw new Error("coordinates must only contain numbers")}),"containsNumber"),i((function(e,r,t){if(!r||!t)throw new Error("type and name required");if(!e||e.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+e.type)}),"geojsonType"),i(a,"featureOf"),i(c,"collectionOf"),i(u,"getGeom"),i(d,"getType")},24838:(e,r,t)=>{"use strict";t.d(r,{w:()=>a});var n=t(67149),o=t(83490),i=t(63399),s=Object.defineProperty,l=(e,r)=>s(e,"name",{value:r,configurable:!0});function a(e){if(!e)throw new Error("geojson is required");const r=[];return(0,i.iw)(e,(e=>{c(e,r)})),(0,n.Lr)(r)}function c(e,r){let t=[];const n=e.geometry;if(null!==n){switch(n.type){case"Polygon":t=(0,o.$R)(n);break;case"LineString":t=[(0,o.$R)(n)]}t.forEach((t=>{u(t,e.properties).forEach((e=>{e.id=r.length,r.push(e)}))}))}}function u(e,r){const t=[];return e.reduce(((e,o)=>{const i=(0,n.wi)([e,o],r);return i.bbox=d(e,o),t.push(i),o})),t}function d(e,r){const t=e[0],n=e[1],o=r[0],i=r[1];return[t<o?t:o,n<i?n:i,t>o?t:o,n>i?n:i]}l(a,"lineSegment"),l(c,"lineSegmentFeature"),l(u,"createSegments"),l(d,"bbox")}}]);