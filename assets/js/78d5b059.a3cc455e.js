(self.webpackChunkturf_www=self.webpackChunkturf_www||[]).push([[28551],{64586:(e,t,r)=>{"use strict";r.r(t),r.d(t,{Map0:()=>f,assets:()=>p,contentTitle:()=>d,default:()=>j,frontMatter:()=>c,metadata:()=>u,toc:()=>h});var n=r(74848),s=r(28453),i=r(67149),o=r(56945),a=r(36145),l=r(78478);const c={title:"flip"},d=void 0,u={id:"api/flip",title:"flip",description:"Description",source:"@site/docs/api/flip.mdx",sourceDirName:"api",slug:"/api/flip",permalink:"/docs/next/api/flip",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api/flip.mdx",tags:[],version:"current",frontMatter:{title:"flip"},sidebar:"apiSidebar",previous:{title:"cleanCoords",permalink:"/docs/next/api/cleanCoords"},next:{title:"rewind",permalink:"/docs/next/api/rewind"}},p={},h=[{value:"Description",id:"description",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3},{value:"Examples",id:"examples",level:3},{value:"Installation",id:"installation",level:3}];function f(){var e=i.zx([20.566406,43.421008]),t={serbia:e,saudiArabia:o.U(e)};return(0,n.jsx)(a.A,{addToMap:t})}function x(e){const t={a:"a",code:"code",em:"em",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h3,{id:"description",children:"Description"}),"\n",(0,n.jsxs)(t.p,{children:["Takes input features and flips all of their coordinates from ",(0,n.jsx)(t.code,{children:"[x, y]"})," to ",(0,n.jsx)(t.code,{children:"[y, x]"}),"."]}),"\n",(0,n.jsx)(t.h3,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"geojson"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.strong,{children:(0,n.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3",children:"GeoJSON"})})}),(0,n.jsx)(t.td,{children:"input features"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsxs)(t.td,{children:["options",(0,n.jsx)("i",{children:"?"})]}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.strong,{children:"Object"})}),(0,n.jsxs)(t.td,{children:["Optional parameters ",(0,n.jsx)(t.em,{children:"(default {})"})]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsxs)(t.td,{children:["options.mutate",(0,n.jsx)("i",{children:"?"})]}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.strong,{children:"boolean"})}),(0,n.jsxs)(t.td,{children:["allows GeoJSON input to be mutated (significant performance increase if true) ",(0,n.jsx)(t.em,{children:"(default false)"})]})]})]})]}),"\n",(0,n.jsx)(t.h3,{id:"returns",children:"Returns"}),"\n",(0,n.jsx)("ul",{children:(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:(0,n.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3",children:"GeoJSON"})})," a feature or set of features of the same type as ",(0,n.jsx)(t.code,{children:"input"})," with flipped coordinates"]})}),"\n",(0,n.jsx)(t.h3,{id:"examples",children:"Examples"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:"var serbia = turf.point([20.566406, 43.421008]);\n\nvar saudiArabia = turf.flip(serbia);\n"})}),"\n","\n",(0,n.jsx)(l.A,{children:()=>(0,n.jsx)(f,{})}),"\n",(0,n.jsx)(t.h3,{id:"installation",children:"Installation"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:'$ npm install @turf/flip\n\nimport { flip } from "@turf/flip";\nconst result = flip(...);\n'})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:'$ npm install @turf/turf\n\nimport * as turf from "@turf/turf";\nconst result = turf.flip(...);\n'})})]})}function j(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(x,{...e})}):x(e)}},42634:()=>{},53257:(e,t,r)=>{"use strict";r.d(t,{Rd:()=>a,o8:()=>i});var n=Object.defineProperty,s=(e,t)=>n(e,"name",{value:t,configurable:!0});function i(e){if(!e)throw new Error("geojson is required");switch(e.type){case"Feature":return o(e);case"FeatureCollection":return l(e);case"Point":case"LineString":case"Polygon":case"MultiPoint":case"MultiLineString":case"MultiPolygon":case"GeometryCollection":return c(e);default:throw new Error("unknown GeoJSON type")}}function o(e){const t={type:"Feature"};return Object.keys(e).forEach((r=>{switch(r){case"type":case"properties":case"geometry":return;default:t[r]=e[r]}})),t.properties=a(e.properties),null==e.geometry?t.geometry=null:t.geometry=c(e.geometry),t}function a(e){const t={};return e?(Object.keys(e).forEach((r=>{const n=e[r];"object"==typeof n?null===n?t[r]=null:Array.isArray(n)?t[r]=n.map((e=>e)):t[r]=a(n):t[r]=n})),t):t}function l(e){const t={type:"FeatureCollection"};return Object.keys(e).forEach((r=>{switch(r){case"type":case"features":return;default:t[r]=e[r]}})),t.features=e.features.map((e=>o(e))),t}function c(e){const t={type:e.type};return e.bbox&&(t.bbox=e.bbox),"GeometryCollection"===e.type?(t.geometries=e.geometries.map((e=>c(e))),t):(t.coordinates=d(e.coordinates),t)}function d(e){const t=e;return"object"!=typeof t[0]?t.slice():t.map((e=>d(e)))}s(i,"clone"),s(o,"cloneFeature"),s(a,"cloneProperties"),s(l,"cloneFeatureCollection"),s(c,"cloneGeometry"),s(d,"deepSlice")},56945:(e,t,r)=>{"use strict";r.d(t,{U:()=>o});var n=r(63399),s=r(67149),i=r(53257);function o(e,t){var r;if(t=t||{},!(0,s.Gv)(t))throw new Error("options is invalid");const o=null!=(r=t.mutate)&&r;if(!e)throw new Error("geojson is required");return!1!==o&&void 0!==o||(e=(0,i.o8)(e)),(0,n.Fh)(e,(function(e){var t=e[0],r=e[1];e[0]=r,e[1]=t})),e}(0,Object.defineProperty)(o,"name",{value:"flip",configurable:!0})}}]);