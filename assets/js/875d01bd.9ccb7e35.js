(self.webpackChunkturf_www=self.webpackChunkturf_www||[]).push([[77512],{71766:(e,t,r)=>{"use strict";r.r(t),r.d(t,{Map0:()=>f,assets:()=>h,contentTitle:()=>u,default:()=>g,frontMatter:()=>c,metadata:()=>d,toc:()=>p});var n=r(74848),o=r(28453),i=r(67149),s=r(70903),l=r(36145),a=r(78478);const c={title:"lineToPolygon"},u=void 0,d={id:"api/lineToPolygon",title:"lineToPolygon",description:"Description",source:"@site/docs/api/lineToPolygon.mdx",sourceDirName:"api",slug:"/api/lineToPolygon",permalink:"/docs/next/api/lineToPolygon",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api/lineToPolygon.mdx",tags:[],version:"current",frontMatter:{title:"lineToPolygon"},sidebar:"apiSidebar",previous:{title:"flatten",permalink:"/docs/next/api/flatten"},next:{title:"polygonToLine",permalink:"/docs/next/api/polygonToLine"}},h={},p=[{value:"Description",id:"description",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3},{value:"Examples",id:"examples",level:3},{value:"Installation",id:"installation",level:3}];function f(){var e=i.wi([[125,-30],[145,-30],[145,-20],[125,-20],[125,-30]]),t={polygon:s.g(e)};return(0,n.jsx)(l.A,{addToMap:t})}function y(e){const t={a:"a",code:"code",em:"em",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h3,{id:"description",children:"Description"}),"\n",(0,n.jsx)(t.p,{children:"Converts (Multi)LineString(s) to Polygon(s)."}),"\n",(0,n.jsx)(t.h3,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"lines"}),(0,n.jsx)(t.td,{children:(0,n.jsxs)(t.strong,{children:[(0,n.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.3",children:"FeatureCollection"})," | ",(0,n.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.2",children:"Feature"}),"<",(0,n.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1.4",children:"LineString"})," | ",(0,n.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1.5",children:"MultiLineString"}),">"]})}),(0,n.jsx)(t.td,{children:"Features to convert"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsxs)(t.td,{children:["options",(0,n.jsx)("i",{children:"?"})]}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.strong,{children:"Object"})}),(0,n.jsxs)(t.td,{children:["Optional parameters ",(0,n.jsx)(t.em,{children:"(default {})"})]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsxs)(t.td,{children:["options.properties",(0,n.jsx)("i",{children:"?"})]}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.strong,{children:"Object"})}),(0,n.jsxs)(t.td,{children:["translates GeoJSON properties to Feature ",(0,n.jsx)(t.em,{children:"(default {})"})]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsxs)(t.td,{children:["options.autoComplete",(0,n.jsx)("i",{children:"?"})]}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.strong,{children:"boolean"})}),(0,n.jsxs)(t.td,{children:["auto complete linestrings (matches first & last coordinates) ",(0,n.jsx)(t.em,{children:"(default true)"})]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsxs)(t.td,{children:["options.orderCoords",(0,n.jsx)("i",{children:"?"})]}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.strong,{children:"boolean"})}),(0,n.jsxs)(t.td,{children:["sorts linestrings to place outer ring at the first position of the coordinates ",(0,n.jsx)(t.em,{children:"(default true)"})]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsxs)(t.td,{children:["options.mutate",(0,n.jsx)("i",{children:"?"})]}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.strong,{children:"boolean"})}),(0,n.jsxs)(t.td,{children:["mutate the original linestring using autoComplete (matches first & last coordinates) ",(0,n.jsx)(t.em,{children:"(default false)"})]})]})]})]}),"\n",(0,n.jsx)(t.h3,{id:"returns",children:"Returns"}),"\n",(0,n.jsx)("ul",{children:(0,n.jsxs)(t.p,{children:[(0,n.jsxs)(t.strong,{children:[(0,n.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.2",children:"Feature"}),"<",(0,n.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1.6",children:"Polygon"})," | ",(0,n.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7946#section-3.1.7",children:"MultiPolygon"}),">"]})," converted to Polygons"]})}),"\n",(0,n.jsx)(t.h3,{id:"examples",children:"Examples"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:"var line = turf.lineString([\n  [125, -30],\n  [145, -30],\n  [145, -20],\n  [125, -20],\n  [125, -30],\n]);\n\nvar polygon = turf.lineToPolygon(line);\n"})}),"\n","\n",(0,n.jsx)(a.A,{children:()=>(0,n.jsx)(f,{})}),"\n",(0,n.jsx)(t.h3,{id:"installation",children:"Installation"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:'$ npm install @turf/line-to-polygon\n\nimport { lineToPolygon } from "@turf/line-to-polygon";\nconst result = lineToPolygon(...);\n'})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:'$ npm install @turf/turf\n\nimport * as turf from "@turf/turf";\nconst result = turf.lineToPolygon(...);\n'})})]})}function g(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(y,{...e})}):y(e)}},42634:()=>{},99589:(e,t,r)=>{"use strict";r.d(t,{Q:()=>o});var n=r(63399);function o(e,t={}){if(null!=e.bbox&&!0!==t.recompute)return e.bbox;const r=[1/0,1/0,-1/0,-1/0];return(0,n.Fh)(e,(e=>{r[0]>e[0]&&(r[0]=e[0]),r[1]>e[1]&&(r[1]=e[1]),r[2]<e[0]&&(r[2]=e[0]),r[3]<e[1]&&(r[3]=e[1])})),r}(0,Object.defineProperty)(o,"name",{value:"bbox",configurable:!0})},53257:(e,t,r)=>{"use strict";r.d(t,{Rd:()=>l,o8:()=>i});var n=Object.defineProperty,o=(e,t)=>n(e,"name",{value:t,configurable:!0});function i(e){if(!e)throw new Error("geojson is required");switch(e.type){case"Feature":return s(e);case"FeatureCollection":return a(e);case"Point":case"LineString":case"Polygon":case"MultiPoint":case"MultiLineString":case"MultiPolygon":case"GeometryCollection":return c(e);default:throw new Error("unknown GeoJSON type")}}function s(e){const t={type:"Feature"};return Object.keys(e).forEach((r=>{switch(r){case"type":case"properties":case"geometry":return;default:t[r]=e[r]}})),t.properties=l(e.properties),null==e.geometry?t.geometry=null:t.geometry=c(e.geometry),t}function l(e){const t={};return e?(Object.keys(e).forEach((r=>{const n=e[r];"object"==typeof n?null===n?t[r]=null:Array.isArray(n)?t[r]=n.map((e=>e)):t[r]=l(n):t[r]=n})),t):t}function a(e){const t={type:"FeatureCollection"};return Object.keys(e).forEach((r=>{switch(r){case"type":case"features":return;default:t[r]=e[r]}})),t.features=e.features.map((e=>s(e))),t}function c(e){const t={type:e.type};return e.bbox&&(t.bbox=e.bbox),"GeometryCollection"===e.type?(t.geometries=e.geometries.map((e=>c(e))),t):(t.coordinates=u(e.coordinates),t)}function u(e){const t=e;return"object"!=typeof t[0]?t.slice():t.map((e=>u(e)))}o(i,"clone"),o(s,"cloneFeature"),o(l,"cloneProperties"),o(a,"cloneFeatureCollection"),o(c,"cloneGeometry"),o(u,"deepSlice")},83490:(e,t,r)=>{"use strict";r.d(t,{$R:()=>l,Pw:()=>d,bg:()=>u,iw:()=>c,mo:()=>a,uG:()=>s});var n=r(67149),o=Object.defineProperty,i=(e,t)=>o(e,"name",{value:t,configurable:!0});function s(e){if(!e)throw new Error("coord is required");if(!Array.isArray(e)){if("Feature"===e.type&&null!==e.geometry&&"Point"===e.geometry.type)return[...e.geometry.coordinates];if("Point"===e.type)return[...e.coordinates]}if(Array.isArray(e)&&e.length>=2&&!Array.isArray(e[0])&&!Array.isArray(e[1]))return[...e];throw new Error("coord must be GeoJSON Point or an Array of numbers")}function l(e){if(Array.isArray(e))return e;if("Feature"===e.type){if(null!==e.geometry)return e.geometry.coordinates}else if(e.coordinates)return e.coordinates;throw new Error("coords must be GeoJSON Feature, Geometry Object or an Array")}function a(e,t,r){if(!e)throw new Error("No feature passed");if(!r)throw new Error(".featureOf() requires a name");if(!e||"Feature"!==e.type||!e.geometry)throw new Error("Invalid input to "+r+", Feature with geometry required");if(!e.geometry||e.geometry.type!==t)throw new Error("Invalid input to "+r+": must be a "+t+", given "+e.geometry.type)}function c(e,t,r){if(!e)throw new Error("No featureCollection passed");if(!r)throw new Error(".collectionOf() requires a name");if(!e||"FeatureCollection"!==e.type)throw new Error("Invalid input to "+r+", FeatureCollection required");for(const n of e.features){if(!n||"Feature"!==n.type||!n.geometry)throw new Error("Invalid input to "+r+", Feature with geometry required");if(!n.geometry||n.geometry.type!==t)throw new Error("Invalid input to "+r+": must be a "+t+", given "+n.geometry.type)}}function u(e){return"Feature"===e.type?e.geometry:e}function d(e,t){return"FeatureCollection"===e.type?"FeatureCollection":"GeometryCollection"===e.type?"GeometryCollection":"Feature"===e.type&&null!==e.geometry?e.geometry.type:e.type}i(s,"getCoord"),i(l,"getCoords"),i((function e(t){if(t.length>1&&(0,n.Et)(t[0])&&(0,n.Et)(t[1]))return!0;if(Array.isArray(t[0])&&t[0].length)return e(t[0]);throw new Error("coordinates must only contain numbers")}),"containsNumber"),i((function(e,t,r){if(!t||!r)throw new Error("type and name required");if(!e||e.type!==t)throw new Error("Invalid input to "+r+": must be a "+t+", given "+e.type)}),"geojsonType"),i(a,"featureOf"),i(c,"collectionOf"),i(u,"getGeom"),i(d,"getType")},70903:(e,t,r)=>{"use strict";r.d(t,{g:()=>c});var n=r(99589),o=r(83490),i=r(67149),s=r(53257),l=Object.defineProperty,a=(e,t)=>l(e,"name",{value:t,configurable:!0});function c(e,t={}){var r,n,l,a=t.properties,c=null==(r=t.autoComplete)||r,d=null==(n=t.orderCoords)||n;if(null!=(l=t.mutate)&&l||(e=(0,s.o8)(e)),"FeatureCollection"===e.type){var h=[];return e.features.forEach((function(e){h.push((0,o.$R)(u(e,{},c,d)))})),(0,i.g5)(h,a)}return u(e,a,c,d)}function u(e,t,r,s){t=t||("Feature"===e.type?e.properties:{});var l=(0,o.bg)(e),a=l.coordinates,c=l.type;if(!a.length)throw new Error("line must contain coordinates");switch(c){case"LineString":return r&&(a=d(a)),(0,i.n1)([a],t);case"MultiLineString":var u=[],p=0;return a.forEach((function(e){if(r&&(e=d(e)),s){var t=h((0,n.Q)((0,i.wi)(e)));t>p?(u.unshift(e),p=t):u.push(e)}else u.push(e)})),(0,i.n1)(u,t);default:throw new Error("geometry type "+c+" is not supported")}}function d(e){var t=e[0],r=t[0],n=t[1],o=e[e.length-1],i=o[0],s=o[1];return r===i&&n===s||e.push(t),e}function h(e){var t=e[0],r=e[1],n=e[2],o=e[3];return Math.abs(t-n)*Math.abs(r-o)}a(c,"lineToPolygon"),a(u,"lineStringToPolygon"),a(d,"autoCompleteCoords"),a(h,"calculateArea")}}]);